
__F4_InkScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003270  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b0  2**0
                  CONTENTS
 10 .bss          000000a4  200001b0  200001b0  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 0000a004  20000254  20000254  000201b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008447  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdb  00000000  00000000  00028627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0002aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ccc  00000000  00000000  0002b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b34b  00000000  00000000  0004ce7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45c7  00000000  00000000  000581c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011c78e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002650  00000000  00000000  0011c7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b0 	.word	0x200001b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033e0 	.word	0x080033e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001b4 	.word	0x200001b4
 80001c4:	080033e0 	.word	0x080033e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_GPIO_Init+0xb0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a24      	ldr	r2, [pc, #144]	; (800057c <MX_GPIO_Init+0xb0>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_GPIO_Init+0xb0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <MX_GPIO_Init+0xb0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a1d      	ldr	r2, [pc, #116]	; (800057c <MX_GPIO_Init+0xb0>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_GPIO_Init+0xb0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_GPIO_Init+0xb0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a16      	ldr	r2, [pc, #88]	; (800057c <MX_GPIO_Init+0xb0>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_GPIO_Init+0xb0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2116      	movs	r1, #22
 800053a:	4811      	ldr	r0, [pc, #68]	; (8000580 <MX_GPIO_Init+0xb4>)
 800053c:	f000 fdcc 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 8000540:	2316      	movs	r3, #22
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <MX_GPIO_Init+0xb4>)
 8000558:	f000 fc0a 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_GPIO_Init+0xb4>)
 8000570:	f000 fbfe 	bl	8000d70 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40023800 	.word	0x40023800
 8000580:	40020000 	.word	0x40020000

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fa75 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f853 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f7ff ff9b 	bl	80004cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000596:	f000 f8bf 	bl	8000718 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Create a new image cache
   EPD_2in13_V3_Init();
 800059a:	f001 fe0f 	bl	80021bc <EPD_2in13_V3_Init>
   EPD_2in13_V3_Clear();
 800059e:	f001 fe55 	bl	800224c <EPD_2in13_V3_Clear>
   UBYTE *BlackImage;
   UWORD Imagesize = ((EPD_2in13_V3_WIDTH % 8 == 0)? (EPD_2in13_V3_WIDTH / 8 ): (EPD_2in13_V3_WIDTH / 8 + 1)) * EPD_2in13_V3_HEIGHT;
 80005a2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80005a6:	80fb      	strh	r3, [r7, #6]
   if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fa0a 	bl	80029c4 <malloc>
 80005b0:	4603      	mov	r3, r0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d105      	bne.n	80005c6 <main+0x42>
       Debug("Failed to apply for black memory...\r\n");
 80005ba:	481d      	ldr	r0, [pc, #116]	; (8000630 <main+0xac>)
 80005bc:	f002 fb60 	bl	8002c80 <puts>
       return -1;
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	e02f      	b.n	8000626 <main+0xa2>
   }
   Paint_NewImage(BlackImage, EPD_2in13_V3_WIDTH, EPD_2in13_V3_HEIGHT, 90, WHITE);
 80005c6:	23ff      	movs	r3, #255	; 0xff
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	235a      	movs	r3, #90	; 0x5a
 80005cc:	22fa      	movs	r2, #250	; 0xfa
 80005ce:	217a      	movs	r1, #122	; 0x7a
 80005d0:	6838      	ldr	r0, [r7, #0]
 80005d2:	f001 ff17 	bl	8002404 <Paint_NewImage>
//   Paint_Clear(WHITE);
//   Paint_SelectImage(BlackImage);
   Paint_Clear(WHITE);
 80005d6:	20ff      	movs	r0, #255	; 0xff
 80005d8:	f002 f8c6 	bl	8002768 <Paint_Clear>
   Paint_DrawBitMap(gImage_Lissandra);
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <main+0xb0>)
 80005de:	f002 f991 	bl	8002904 <Paint_DrawBitMap>
   EPD_2in13_V3_Display(BlackImage);
 80005e2:	6838      	ldr	r0, [r7, #0]
 80005e4:	f001 fe59 	bl	800229a <EPD_2in13_V3_Display>

   Paint_NewImage(BlackImage, EPD_2in13_V3_WIDTH, EPD_2in13_V3_HEIGHT, 90, WHITE);
 80005e8:	23ff      	movs	r3, #255	; 0xff
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	235a      	movs	r3, #90	; 0x5a
 80005ee:	22fa      	movs	r2, #250	; 0xfa
 80005f0:	217a      	movs	r1, #122	; 0x7a
 80005f2:	6838      	ldr	r0, [r7, #0]
 80005f4:	f001 ff06 	bl	8002404 <Paint_NewImage>
   Paint_SelectImage(BlackImage);
 80005f8:	6838      	ldr	r0, [r7, #0]
 80005fa:	f001 ff59 	bl	80024b0 <Paint_SelectImage>
   Paint_ClearWindows(210,1, 250,122, BLACK);
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	237a      	movs	r3, #122	; 0x7a
 8000604:	22fa      	movs	r2, #250	; 0xfa
 8000606:	2101      	movs	r1, #1
 8000608:	20d2      	movs	r0, #210	; 0xd2
 800060a:	f002 f94d 	bl	80028a8 <Paint_ClearWindows>
   EPD_2in13_V3_Display_Partial(BlackImage);
 800060e:	6838      	ldr	r0, [r7, #0]
 8000610:	f001 fe76 	bl	8002300 <EPD_2in13_V3_Display_Partial>
   DEV_Delay_ms(2000);
 8000614:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000618:	f000 faa0 	bl	8000b5c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(10000);
 800061c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000620:	f000 fa9c 	bl	8000b5c <HAL_Delay>
 8000624:	e7fa      	b.n	800061c <main+0x98>
  }
  /* USER CODE END 3 */
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	080033f8 	.word	0x080033f8
 8000634:	080037b4 	.word	0x080037b4

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f9c4 	bl	80029d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fd25 	bl	800110c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f820 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ff86 	bl	80015fc <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f809 	bl	800070c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_SPI1_Init+0x64>)
 800071e:	4a18      	ldr	r2, [pc, #96]	; (8000780 <MX_SPI1_Init+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_SPI1_Init+0x64>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_SPI1_Init+0x64>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_SPI1_Init+0x64>)
 800074c:	2228      	movs	r2, #40	; 0x28
 800074e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SPI1_Init+0x64>)
 8000764:	220a      	movs	r2, #10
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_SPI1_Init+0x64>)
 800076a:	f001 f933 	bl	80019d4 <HAL_SPI_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000774:	f7ff ffca 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001cc 	.word	0x200001cc
 8000780:	40013000 	.word	0x40013000

08000784 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a19      	ldr	r2, [pc, #100]	; (8000808 <HAL_SPI_MspInit+0x84>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12b      	bne.n	80007fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_SPI_MspInit+0x88>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <HAL_SPI_MspInit+0x88>)
 80007b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_SPI_MspInit+0x88>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_SPI_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <HAL_SPI_MspInit+0x88>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_SPI_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ee:	2305      	movs	r3, #5
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <HAL_SPI_MspInit+0x8c>)
 80007fa:	f000 fab9 	bl	8000d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40013000 	.word	0x40013000
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <HAL_MspInit+0x4c>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x4c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f934 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e00a      	b.n	80008e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ca:	f3af 8000 	nop.w
 80008ce:	4601      	mov	r1, r0
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbf0      	blt.n	80008ca <_read+0x12>
	}

return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e009      	b.n	8000918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf1      	blt.n	8000904 <_write+0x12>
	}
	return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_close>:

int _close(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000952:	605a      	str	r2, [r3, #4]
	return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_isatty>:

int _isatty(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	return 1;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f001 ffd4 	bl	8002970 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20020000 	.word	0x20020000
 80009f4:	00001000 	.word	0x00001000
 80009f8:	20000224 	.word	0x20000224
 80009fc:	20000258 	.word	0x20000258

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f001 ff93 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd95 	bl	8000584 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8000a68:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 8000a6c:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000a70:	20000254 	.word	0x20000254

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f931 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff feb2 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f93b 	bl	8000d56 <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f911 	bl	8000d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000228 	.word	0x20000228

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000228 	.word	0x20000228

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_Delay+0x44>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff47 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff5c 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff8e 	bl	8000c5c <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5d 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffb0 	bl	8000cc4 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e16b      	b.n	8001064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 815a 	bne.w	800105e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	69b9      	ldr	r1, [r7, #24]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80b4 	beq.w	800105e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b60      	ldr	r3, [pc, #384]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a5f      	ldr	r2, [pc, #380]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b5d      	ldr	r3, [pc, #372]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a5b      	ldr	r2, [pc, #364]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	; (8001088 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x21e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x324>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x328>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x32c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x330>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x20a>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00e      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae90 	bls.w	8000d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e001      	b.n	80010ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f4:	e003      	b.n	80010fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	041a      	lsls	r2, r3, #16
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e267      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d075      	beq.n	8001216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112a:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b04      	cmp	r3, #4
 8001134:	d00c      	beq.n	8001150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001136:	4b85      	ldr	r3, [pc, #532]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113e:	2b08      	cmp	r3, #8
 8001140:	d112      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001142:	4b82      	ldr	r3, [pc, #520]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800114e:	d10b      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	4b7e      	ldr	r3, [pc, #504]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d05b      	beq.n	8001214 <HAL_RCC_OscConfig+0x108>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d157      	bne.n	8001214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e242      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d106      	bne.n	8001180 <HAL_RCC_OscConfig+0x74>
 8001172:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a75      	ldr	r2, [pc, #468]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e01d      	b.n	80011bc <HAL_RCC_OscConfig+0xb0>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x98>
 800118a:	4b70      	ldr	r3, [pc, #448]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6f      	ldr	r2, [pc, #444]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b6d      	ldr	r3, [pc, #436]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6c      	ldr	r2, [pc, #432]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0xb0>
 80011a4:	4b69      	ldr	r3, [pc, #420]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a68      	ldr	r2, [pc, #416]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b66      	ldr	r3, [pc, #408]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a65      	ldr	r2, [pc, #404]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fcbe 	bl	8000b44 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fcba 	bl	8000b44 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e207      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b5b      	ldr	r3, [pc, #364]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0xc0>
 80011ea:	e014      	b.n	8001216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fcaa 	bl	8000b44 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fca6 	bl	8000b44 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1f3      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0xe8>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d063      	beq.n	80012ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d11c      	bne.n	8001274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d116      	bne.n	8001274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x152>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e1c7      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4937      	ldr	r1, [pc, #220]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	e03a      	b.n	80012ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d020      	beq.n	80012be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_OscConfig+0x244>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fc5f 	bl	8000b44 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fc5b 	bl	8000b44 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1a8      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4925      	ldr	r1, [pc, #148]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x244>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc3e 	bl	8000b44 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc3a 	bl	8000b44 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e187      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d036      	beq.n	8001364 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d016      	beq.n	800132c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_RCC_OscConfig+0x248>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fc1e 	bl	8000b44 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fc1a 	bl	8000b44 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e167      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x200>
 800132a:	e01b      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_RCC_OscConfig+0x248>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fc07 	bl	8000b44 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	e00e      	b.n	8001358 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133a:	f7ff fc03 	bl	8000b44 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d907      	bls.n	8001358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e150      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
 800134c:	40023800 	.word	0x40023800
 8001350:	42470000 	.word	0x42470000
 8001354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800135a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ea      	bne.n	800133a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8097 	beq.w	80014a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b7d      	ldr	r3, [pc, #500]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a7c      	ldr	r2, [pc, #496]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b7a      	ldr	r3, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	4b77      	ldr	r3, [pc, #476]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d118      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ae:	4b74      	ldr	r3, [pc, #464]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a73      	ldr	r2, [pc, #460]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbc3 	bl	8000b44 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c2:	f7ff fbbf 	bl	8000b44 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e10c      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2ea>
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6713      	str	r3, [r2, #112]	; 0x70
 80013f4:	e01c      	b.n	8001430 <HAL_RCC_OscConfig+0x324>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x30c>
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	4a5b      	ldr	r2, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0x324>
 8001418:	4b58      	ldr	r3, [pc, #352]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
 8001424:	4b55      	ldr	r3, [pc, #340]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a54      	ldr	r2, [pc, #336]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 0304 	bic.w	r3, r3, #4
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d015      	beq.n	8001464 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fb84 	bl	8000b44 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	e00a      	b.n	8001456 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001440:	f7ff fb80 	bl	8000b44 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f241 3288 	movw	r2, #5000	; 0x1388
 800144e:	4293      	cmp	r3, r2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e0cb      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0ee      	beq.n	8001440 <HAL_RCC_OscConfig+0x334>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fb6e 	bl	8000b44 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fb6a 	bl	8000b44 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e0b5      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ee      	bne.n	800146c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a38      	ldr	r2, [pc, #224]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800149a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a1 	beq.w	80015ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d05c      	beq.n	8001570 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d141      	bne.n	8001542 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_RCC_OscConfig+0x478>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb3e 	bl	8000b44 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fb3a 	bl	8000b44 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e087      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69da      	ldr	r2, [r3, #28]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	3b01      	subs	r3, #1
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	061b      	lsls	r3, r3, #24
 800150e:	491b      	ldr	r1, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x478>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fb13 	bl	8000b44 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fb0f 	bl	8000b44 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e05c      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x416>
 8001540:	e054      	b.n	80015ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_OscConfig+0x478>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fafc 	bl	8000b44 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff faf8 	bl	8000b44 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e045      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x444>
 800156e:	e03d      	b.n	80015ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e038      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000
 8001584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x4ec>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d028      	beq.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d121      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d11a      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015b8:	4013      	ands	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d111      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	3b01      	subs	r3, #1
 80015d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0cc      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d90c      	bls.n	8001638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0b8      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001650:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800165a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001668:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	494d      	ldr	r1, [pc, #308]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d044      	beq.n	800171c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d119      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e07f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e06f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e067      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f023 0203 	bic.w	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4934      	ldr	r1, [pc, #208]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff fa2a 	bl	8000b44 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	e00a      	b.n	800170a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f4:	f7ff fa26 	bl	8000b44 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e04f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 020c 	and.w	r2, r3, #12
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	429a      	cmp	r2, r3
 800171a:	d1eb      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d20c      	bcs.n	8001744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e032      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4916      	ldr	r1, [pc, #88]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	490e      	ldr	r1, [pc, #56]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001782:	f000 f821 	bl	80017c8 <HAL_RCC_GetSysClockFreq>
 8001786:	4602      	mov	r2, r0
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	5ccb      	ldrb	r3, [r1, r3]
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_ClockConfig+0x1c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f98a 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00
 80017b8:	40023800 	.word	0x40023800
 80017bc:	08004534 	.word	0x08004534
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b094      	sub	sp, #80	; 0x50
 80017ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
 80017d4:	2300      	movs	r3, #0
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017d8:	2300      	movs	r3, #0
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d00d      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x40>
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	f200 80e1 	bhi.w	80019b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x34>
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x3a>
 80017fa:	e0db      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017fc:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_GetSysClockFreq+0x204>)
 80017fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001800:	e0db      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001802:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001806:	e0d8      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001808:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001810:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d063      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	2200      	movs	r2, #0
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
 8001828:	63fa      	str	r2, [r7, #60]	; 0x3c
 800182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
 8001832:	2300      	movs	r3, #0
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
 8001836:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800183a:	4622      	mov	r2, r4
 800183c:	462b      	mov	r3, r5
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	0159      	lsls	r1, r3, #5
 8001848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800184c:	0150      	lsls	r0, r2, #5
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4621      	mov	r1, r4
 8001854:	1a51      	subs	r1, r2, r1
 8001856:	6139      	str	r1, [r7, #16]
 8001858:	4629      	mov	r1, r5
 800185a:	eb63 0301 	sbc.w	r3, r3, r1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800186c:	4659      	mov	r1, fp
 800186e:	018b      	lsls	r3, r1, #6
 8001870:	4651      	mov	r1, sl
 8001872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001876:	4651      	mov	r1, sl
 8001878:	018a      	lsls	r2, r1, #6
 800187a:	4651      	mov	r1, sl
 800187c:	ebb2 0801 	subs.w	r8, r2, r1
 8001880:	4659      	mov	r1, fp
 8001882:	eb63 0901 	sbc.w	r9, r3, r1
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800189a:	4690      	mov	r8, r2
 800189c:	4699      	mov	r9, r3
 800189e:	4623      	mov	r3, r4
 80018a0:	eb18 0303 	adds.w	r3, r8, r3
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	462b      	mov	r3, r5
 80018a8:	eb49 0303 	adc.w	r3, r9, r3
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018ba:	4629      	mov	r1, r5
 80018bc:	024b      	lsls	r3, r1, #9
 80018be:	4621      	mov	r1, r4
 80018c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c4:	4621      	mov	r1, r4
 80018c6:	024a      	lsls	r2, r1, #9
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ce:	2200      	movs	r2, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018d8:	f7fe fc76 	bl	80001c8 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e4:	e058      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	2200      	movs	r2, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	4611      	mov	r1, r2
 80018f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001900:	4642      	mov	r2, r8
 8001902:	464b      	mov	r3, r9
 8001904:	f04f 0000 	mov.w	r0, #0
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	0159      	lsls	r1, r3, #5
 800190e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001912:	0150      	lsls	r0, r2, #5
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4641      	mov	r1, r8
 800191a:	ebb2 0a01 	subs.w	sl, r2, r1
 800191e:	4649      	mov	r1, r9
 8001920:	eb63 0b01 	sbc.w	fp, r3, r1
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001930:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001934:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001938:	ebb2 040a 	subs.w	r4, r2, sl
 800193c:	eb63 050b 	sbc.w	r5, r3, fp
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	00eb      	lsls	r3, r5, #3
 800194a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800194e:	00e2      	lsls	r2, r4, #3
 8001950:	4614      	mov	r4, r2
 8001952:	461d      	mov	r5, r3
 8001954:	4643      	mov	r3, r8
 8001956:	18e3      	adds	r3, r4, r3
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	464b      	mov	r3, r9
 800195c:	eb45 0303 	adc.w	r3, r5, r3
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800196e:	4629      	mov	r1, r5
 8001970:	028b      	lsls	r3, r1, #10
 8001972:	4621      	mov	r1, r4
 8001974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001978:	4621      	mov	r1, r4
 800197a:	028a      	lsls	r2, r1, #10
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001982:	2200      	movs	r2, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	61fa      	str	r2, [r7, #28]
 8001988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800198c:	f7fe fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetSysClockFreq+0x204>)
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3750      	adds	r7, #80	; 0x50
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e07b      	b.n	8001ade <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f6:	d009      	beq.n	8001a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
 80019fe:	e005      	b.n	8001a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe feac 	bl	8000784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a90:	ea42 0103 	orr.w	r1, r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	f003 0104 	and.w	r1, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f003 0210 	and.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b088      	sub	sp, #32
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_SPI_Transmit+0x22>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e126      	b.n	8001d56 <HAL_SPI_Transmit+0x270>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b10:	f7ff f818 	bl	8000b44 <HAL_GetTick>
 8001b14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d002      	beq.n	8001b2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
 8001b28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b2a:	e10b      	b.n	8001d44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_SPI_Transmit+0x52>
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b3c:	e102      	b.n	8001d44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2203      	movs	r2, #3
 8001b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	88fa      	ldrh	r2, [r7, #6]
 8001b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b84:	d10f      	bne.n	8001ba6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ba4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb0:	2b40      	cmp	r3, #64	; 0x40
 8001bb2:	d007      	beq.n	8001bc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bcc:	d14b      	bne.n	8001c66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_SPI_Transmit+0xf6>
 8001bd6:	8afb      	ldrh	r3, [r7, #22]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d13e      	bne.n	8001c5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	881a      	ldrh	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	1c9a      	adds	r2, r3, #2
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c00:	e02b      	b.n	8001c5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d112      	bne.n	8001c36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	881a      	ldrh	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	1c9a      	adds	r2, r3, #2
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c34:	e011      	b.n	8001c5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c36:	f7fe ff85 	bl	8000b44 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d803      	bhi.n	8001c4e <HAL_SPI_Transmit+0x168>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d102      	bne.n	8001c54 <HAL_SPI_Transmit+0x16e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c58:	e074      	b.n	8001d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ce      	bne.n	8001c02 <HAL_SPI_Transmit+0x11c>
 8001c64:	e04c      	b.n	8001d00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_SPI_Transmit+0x18e>
 8001c6e:	8afb      	ldrh	r3, [r7, #22]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d140      	bne.n	8001cf6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	7812      	ldrb	r2, [r2, #0]
 8001c80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c9a:	e02c      	b.n	8001cf6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d113      	bne.n	8001cd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	330c      	adds	r3, #12
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cd0:	e011      	b.n	8001cf6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cd2:	f7fe ff37 	bl	8000b44 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d803      	bhi.n	8001cea <HAL_SPI_Transmit+0x204>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d102      	bne.n	8001cf0 <HAL_SPI_Transmit+0x20a>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cf4:	e026      	b.n	8001d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1cd      	bne.n	8001c9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f8b3 	bl	8001e70 <SPI_EndRxTxTransaction>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10a      	bne.n	8001d34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	77fb      	strb	r3, [r7, #31]
 8001d40:	e000      	b.n	8001d44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001d42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d70:	f7fe fee8 	bl	8000b44 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d80:	f7fe fee0 	bl	8000b44 <HAL_GetTick>
 8001d84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	015b      	lsls	r3, r3, #5
 8001d8c:	0d1b      	lsrs	r3, r3, #20
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d96:	e054      	b.n	8001e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9e:	d050      	beq.n	8001e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001da0:	f7fe fed0 	bl	8000b44 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d902      	bls.n	8001db6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d13d      	bne.n	8001e32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dce:	d111      	bne.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd8:	d004      	beq.n	8001de4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de2:	d107      	bne.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfc:	d10f      	bne.n	8001e1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e017      	b.n	8001e62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d19b      	bne.n	8001d98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000

08001e70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <SPI_EndRxTxTransaction+0x7c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <SPI_EndRxTxTransaction+0x80>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0d5b      	lsrs	r3, r3, #21
 8001e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e9a:	d112      	bne.n	8001ec2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff ff5a 	bl	8001d60 <SPI_WaitFlagStateUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f043 0220 	orr.w	r2, r3, #32
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e00f      	b.n	8001ee2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b80      	cmp	r3, #128	; 0x80
 8001eda:	d0f2      	beq.n	8001ec2 <SPI_EndRxTxTransaction+0x52>
 8001edc:	e000      	b.n	8001ee0 <SPI_EndRxTxTransaction+0x70>
        break;
 8001ede:	bf00      	nop
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	165e9f81 	.word	0x165e9f81

08001ef4 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8001efe:	1df9      	adds	r1, r7, #7
 8001f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f04:	2201      	movs	r2, #1
 8001f06:	4803      	ldr	r0, [pc, #12]	; (8001f14 <DEV_SPI_WriteByte+0x20>)
 8001f08:	f7ff fded 	bl	8001ae6 <HAL_SPI_Transmit>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200001cc 	.word	0x200001cc

08001f18 <EPD_2in13_V3_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2in13_V3_Reset(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2102      	movs	r1, #2
 8001f20:	480b      	ldr	r0, [pc, #44]	; (8001f50 <EPD_2in13_V3_Reset+0x38>)
 8001f22:	f7ff f8d9 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 8001f26:	2014      	movs	r0, #20
 8001f28:	f7fe fe18 	bl	8000b5c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2102      	movs	r1, #2
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <EPD_2in13_V3_Reset+0x38>)
 8001f32:	f7ff f8d1 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8001f36:	2002      	movs	r0, #2
 8001f38:	f7fe fe10 	bl	8000b5c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <EPD_2in13_V3_Reset+0x38>)
 8001f42:	f7ff f8c9 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 8001f46:	2014      	movs	r0, #20
 8001f48:	f7fe fe08 	bl	8000b5c <HAL_Delay>
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020000 	.word	0x40020000

08001f54 <EPD_2in13_V3_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2in13_V3_SendCommand(UBYTE Reg)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2104      	movs	r1, #4
 8001f62:	480a      	ldr	r0, [pc, #40]	; (8001f8c <EPD_2in13_V3_SendCommand+0x38>)
 8001f64:	f7ff f8b8 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2110      	movs	r1, #16
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <EPD_2in13_V3_SendCommand+0x38>)
 8001f6e:	f7ff f8b3 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ffbd 	bl	8001ef4 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2110      	movs	r1, #16
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <EPD_2in13_V3_SendCommand+0x38>)
 8001f80:	f7ff f8aa 	bl	80010d8 <HAL_GPIO_WritePin>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40020000 	.word	0x40020000

08001f90 <EPD_2in13_V3_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2in13_V3_SendData(UBYTE Data)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <EPD_2in13_V3_SendData+0x38>)
 8001fa0:	f7ff f89a 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <EPD_2in13_V3_SendData+0x38>)
 8001faa:	f7ff f895 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff9f 	bl	8001ef4 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2110      	movs	r1, #16
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <EPD_2in13_V3_SendData+0x38>)
 8001fbc:	f7ff f88c 	bl	80010d8 <HAL_GPIO_WritePin>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40020000 	.word	0x40020000

08001fcc <EPD_2in13_V3_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2in13_V3_ReadBusy(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8001fd0:	480b      	ldr	r0, [pc, #44]	; (8002000 <EPD_2in13_V3_ReadBusy+0x34>)
 8001fd2:	f000 fe55 	bl	8002c80 <puts>
	while(1)
	{	 //=1 BUSY
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8001fd6:	2108      	movs	r1, #8
 8001fd8:	480a      	ldr	r0, [pc, #40]	; (8002004 <EPD_2in13_V3_ReadBusy+0x38>)
 8001fda:	f7ff f865 	bl	80010a8 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <EPD_2in13_V3_ReadBusy+0x20>
			break;
		DEV_Delay_ms(10);
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f7fe fdb9 	bl	8000b5c <HAL_Delay>
		if(DEV_Digital_Read(EPD_BUSY_PIN)==0) 
 8001fea:	e7f4      	b.n	8001fd6 <EPD_2in13_V3_ReadBusy+0xa>
			break;
 8001fec:	bf00      	nop
	}
	DEV_Delay_ms(10);
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f7fe fdb4 	bl	8000b5c <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <EPD_2in13_V3_ReadBusy+0x3c>)
 8001ff6:	f000 fe43 	bl	8002c80 <puts>
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	08003424 	.word	0x08003424
 8002004:	40020000 	.word	0x40020000
 8002008:	0800343c 	.word	0x0800343c

0800200c <EPD_2in13_V3_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2in13_V3_TurnOnDisplay(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	EPD_2in13_V3_SendCommand(0x22); // Display Update Control
 8002010:	2022      	movs	r0, #34	; 0x22
 8002012:	f7ff ff9f 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0xc7);
 8002016:	20c7      	movs	r0, #199	; 0xc7
 8002018:	f7ff ffba 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendCommand(0x20); // Activate Display Update Sequence
 800201c:	2020      	movs	r0, #32
 800201e:	f7ff ff99 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_ReadBusy();
 8002022:	f7ff ffd3 	bl	8001fcc <EPD_2in13_V3_ReadBusy>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <EPD_2in13_V3_TurnOnDisplay_Partial>:
/******************************************************************************
function :	Turn On Display
parameter:	
******************************************************************************/
static void EPD_2in13_V3_TurnOnDisplay_Partial(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
	EPD_2in13_V3_SendCommand(0x22); // Display Update Control
 800202e:	2022      	movs	r0, #34	; 0x22
 8002030:	f7ff ff90 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0x0f);	// fast:0x0c, quality:0x0f, 0xcf
 8002034:	200f      	movs	r0, #15
 8002036:	f7ff ffab 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendCommand(0x20); // Activate Display Update Sequence
 800203a:	2020      	movs	r0, #32
 800203c:	f7ff ff8a 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_ReadBusy();
 8002040:	f7ff ffc4 	bl	8001fcc <EPD_2in13_V3_ReadBusy>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <EPD_2IN13_V3_LUT>:
function :	Set lut
parameter:	
    lut :   lut data
******************************************************************************/
static void EPD_2IN13_V3_LUT(UBYTE *lut)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	UBYTE count;
	EPD_2in13_V3_SendCommand(0x32);
 8002050:	2032      	movs	r0, #50	; 0x32
 8002052:	f7ff ff7f 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	for(count=0; count<153; count++) 
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e009      	b.n	8002070 <EPD_2IN13_V3_LUT+0x28>
		EPD_2in13_V3_SendData(lut[count]); 
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff93 	bl	8001f90 <EPD_2in13_V3_SendData>
	for(count=0; count<153; count++) 
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	3301      	adds	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b98      	cmp	r3, #152	; 0x98
 8002074:	d9f2      	bls.n	800205c <EPD_2IN13_V3_LUT+0x14>
	EPD_2in13_V3_ReadBusy();
 8002076:	f7ff ffa9 	bl	8001fcc <EPD_2in13_V3_ReadBusy>
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <EPD_2IN13_V2_LUT_by_host>:
function :	Send lut data and configuration
parameter:	
    lut :   lut data
******************************************************************************/
static void EPD_2IN13_V2_LUT_by_host(UBYTE *lut)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	EPD_2IN13_V3_LUT((UBYTE *)lut);			//lut
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffdc 	bl	8002048 <EPD_2IN13_V3_LUT>
	EPD_2in13_V3_SendCommand(0x3f);
 8002090:	203f      	movs	r0, #63	; 0x3f
 8002092:	f7ff ff5f 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(*(lut+153));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3399      	adds	r3, #153	; 0x99
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff77 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendCommand(0x03);	// gate voltage
 80020a2:	2003      	movs	r0, #3
 80020a4:	f7ff ff56 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(*(lut+154));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	339a      	adds	r3, #154	; 0x9a
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff6e 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendCommand(0x04);	// source voltage
 80020b4:	2004      	movs	r0, #4
 80020b6:	f7ff ff4d 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(*(lut+155));	// VSH
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	339b      	adds	r3, #155	; 0x9b
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff65 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(*(lut+156));	// VSH2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	339c      	adds	r3, #156	; 0x9c
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5f 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(*(lut+157));	// VSL
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	339d      	adds	r3, #157	; 0x9d
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff59 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendCommand(0x2c);		// VCOM
 80020de:	202c      	movs	r0, #44	; 0x2c
 80020e0:	f7ff ff38 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(*(lut+158));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	339e      	adds	r3, #158	; 0x9e
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff50 	bl	8001f90 <EPD_2in13_V3_SendData>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <EPD_2in13_V3_SetWindows>:
	Ystart : Y-axis starting position
	Xend : End position of X-axis
	Yend : End position of Y-axis
******************************************************************************/
static void EPD_2in13_V3_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4604      	mov	r4, r0
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4623      	mov	r3, r4
 8002108:	80fb      	strh	r3, [r7, #6]
 800210a:	4603      	mov	r3, r0
 800210c:	80bb      	strh	r3, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	807b      	strh	r3, [r7, #2]
 8002112:	4613      	mov	r3, r2
 8002114:	803b      	strh	r3, [r7, #0]
    EPD_2in13_V3_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8002116:	2044      	movs	r0, #68	; 0x44
 8002118:	f7ff ff1c 	bl	8001f54 <EPD_2in13_V3_SendCommand>
    EPD_2in13_V3_SendData((Xstart>>3) & 0xFF);
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	b29b      	uxth	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff33 	bl	8001f90 <EPD_2in13_V3_SendData>
    EPD_2in13_V3_SendData((Xend>>3) & 0xFF);
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	b29b      	uxth	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff2c 	bl	8001f90 <EPD_2in13_V3_SendData>
	
    EPD_2in13_V3_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8002138:	2045      	movs	r0, #69	; 0x45
 800213a:	f7ff ff0b 	bl	8001f54 <EPD_2in13_V3_SendCommand>
    EPD_2in13_V3_SendData(Ystart & 0xFF);
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff24 	bl	8001f90 <EPD_2in13_V3_SendData>
    EPD_2in13_V3_SendData((Ystart >> 8) & 0xFF);
 8002148:	88bb      	ldrh	r3, [r7, #4]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff1d 	bl	8001f90 <EPD_2in13_V3_SendData>
    EPD_2in13_V3_SendData(Yend & 0xFF);
 8002156:	883b      	ldrh	r3, [r7, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff18 	bl	8001f90 <EPD_2in13_V3_SendData>
    EPD_2in13_V3_SendData((Yend >> 8) & 0xFF);
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	b29b      	uxth	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff11 	bl	8001f90 <EPD_2in13_V3_SendData>
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}

08002176 <EPD_2in13_V3_SetCursor>:
parameter:
	Xstart : X-axis starting position
	Ystart : Y-axis starting position
******************************************************************************/
static void EPD_2in13_V3_SetCursor(UWORD Xstart, UWORD Ystart)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	460a      	mov	r2, r1
 8002180:	80fb      	strh	r3, [r7, #6]
 8002182:	4613      	mov	r3, r2
 8002184:	80bb      	strh	r3, [r7, #4]
    EPD_2in13_V3_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8002186:	204e      	movs	r0, #78	; 0x4e
 8002188:	f7ff fee4 	bl	8001f54 <EPD_2in13_V3_SendCommand>
    EPD_2in13_V3_SendData(Xstart & 0xFF);
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fefd 	bl	8001f90 <EPD_2in13_V3_SendData>

    EPD_2in13_V3_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8002196:	204f      	movs	r0, #79	; 0x4f
 8002198:	f7ff fedc 	bl	8001f54 <EPD_2in13_V3_SendCommand>
    EPD_2in13_V3_SendData(Ystart & 0xFF);
 800219c:	88bb      	ldrh	r3, [r7, #4]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fef5 	bl	8001f90 <EPD_2in13_V3_SendData>
    EPD_2in13_V3_SendData((Ystart >> 8) & 0xFF);
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff feee 	bl	8001f90 <EPD_2in13_V3_SendData>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <EPD_2in13_V3_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2in13_V3_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	EPD_2in13_V3_Reset();
 80021c0:	f7ff feaa 	bl	8001f18 <EPD_2in13_V3_Reset>
	DEV_Delay_ms(100);
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	f7fe fcc9 	bl	8000b5c <HAL_Delay>

	EPD_2in13_V3_ReadBusy();   
 80021ca:	f7ff feff 	bl	8001fcc <EPD_2in13_V3_ReadBusy>
	EPD_2in13_V3_SendCommand(0x12);  //SWRESET
 80021ce:	2012      	movs	r0, #18
 80021d0:	f7ff fec0 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_ReadBusy();   
 80021d4:	f7ff fefa 	bl	8001fcc <EPD_2in13_V3_ReadBusy>

	EPD_2in13_V3_SendCommand(0x01); //Driver output control      
 80021d8:	2001      	movs	r0, #1
 80021da:	f7ff febb 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0xf9);
 80021de:	20f9      	movs	r0, #249	; 0xf9
 80021e0:	f7ff fed6 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff fed3 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff fed0 	bl	8001f90 <EPD_2in13_V3_SendData>

	EPD_2in13_V3_SendCommand(0x11); //data entry mode       
 80021f0:	2011      	movs	r0, #17
 80021f2:	f7ff feaf 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0x03);
 80021f6:	2003      	movs	r0, #3
 80021f8:	f7ff feca 	bl	8001f90 <EPD_2in13_V3_SendData>

	EPD_2in13_V3_SetWindows(0, 0, EPD_2in13_V3_WIDTH-1, EPD_2in13_V3_HEIGHT-1);
 80021fc:	23f9      	movs	r3, #249	; 0xf9
 80021fe:	2279      	movs	r2, #121	; 0x79
 8002200:	2100      	movs	r1, #0
 8002202:	2000      	movs	r0, #0
 8002204:	f7ff ff78 	bl	80020f8 <EPD_2in13_V3_SetWindows>
	EPD_2in13_V3_SetCursor(0, 0);
 8002208:	2100      	movs	r1, #0
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff ffb3 	bl	8002176 <EPD_2in13_V3_SetCursor>
	
	EPD_2in13_V3_SendCommand(0x3C); //BorderWavefrom
 8002210:	203c      	movs	r0, #60	; 0x3c
 8002212:	f7ff fe9f 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0x05);	
 8002216:	2005      	movs	r0, #5
 8002218:	f7ff feba 	bl	8001f90 <EPD_2in13_V3_SendData>

	EPD_2in13_V3_SendCommand(0x21); //  Display update control
 800221c:	2021      	movs	r0, #33	; 0x21
 800221e:	f7ff fe99 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff feb4 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x80);	
 8002228:	2080      	movs	r0, #128	; 0x80
 800222a:	f7ff feb1 	bl	8001f90 <EPD_2in13_V3_SendData>

	EPD_2in13_V3_SendCommand(0x18); //Read built-in temperature sensor
 800222e:	2018      	movs	r0, #24
 8002230:	f7ff fe90 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0x80);	
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	f7ff feab 	bl	8001f90 <EPD_2in13_V3_SendData>

	EPD_2in13_V3_ReadBusy();
 800223a:	f7ff fec7 	bl	8001fcc <EPD_2in13_V3_ReadBusy>
	EPD_2IN13_V2_LUT_by_host(WS_20_30_2IN13_V3);
 800223e:	4802      	ldr	r0, [pc, #8]	; (8002248 <EPD_2in13_V3_Init+0x8c>)
 8002240:	f7ff ff1f 	bl	8002082 <EPD_2IN13_V2_LUT_by_host>
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000ac 	.word	0x200000ac

0800224c <EPD_2in13_V3_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2in13_V3_Clear(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
	UWORD Width, Height;
    Width = (EPD_2in13_V3_WIDTH % 8 == 0)? (EPD_2in13_V3_WIDTH / 8 ): (EPD_2in13_V3_WIDTH / 8 + 1);
 8002252:	2310      	movs	r3, #16
 8002254:	807b      	strh	r3, [r7, #2]
    Height = EPD_2in13_V3_HEIGHT;
 8002256:	23fa      	movs	r3, #250	; 0xfa
 8002258:	803b      	strh	r3, [r7, #0]
	
    EPD_2in13_V3_SendCommand(0x24);
 800225a:	2024      	movs	r0, #36	; 0x24
 800225c:	f7ff fe7a 	bl	8001f54 <EPD_2in13_V3_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8002260:	2300      	movs	r3, #0
 8002262:	80fb      	strh	r3, [r7, #6]
 8002264:	e00f      	b.n	8002286 <EPD_2in13_V3_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 8002266:	2300      	movs	r3, #0
 8002268:	80bb      	strh	r3, [r7, #4]
 800226a:	e005      	b.n	8002278 <EPD_2in13_V3_Clear+0x2c>
            EPD_2in13_V3_SendData(0XFF);
 800226c:	20ff      	movs	r0, #255	; 0xff
 800226e:	f7ff fe8f 	bl	8001f90 <EPD_2in13_V3_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	3301      	adds	r3, #1
 8002276:	80bb      	strh	r3, [r7, #4]
 8002278:	88ba      	ldrh	r2, [r7, #4]
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	429a      	cmp	r2, r3
 800227e:	d3f5      	bcc.n	800226c <EPD_2in13_V3_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	3301      	adds	r3, #1
 8002284:	80fb      	strh	r3, [r7, #6]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	883b      	ldrh	r3, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3eb      	bcc.n	8002266 <EPD_2in13_V3_Clear+0x1a>
        }
    }	

	EPD_2in13_V3_TurnOnDisplay();
 800228e:	f7ff febd 	bl	800200c <EPD_2in13_V3_TurnOnDisplay>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <EPD_2in13_V3_Display>:
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
	image : Image data
******************************************************************************/
void EPD_2in13_V3_Display(UBYTE *Image)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
	UWORD Width, Height;
    Width = (EPD_2in13_V3_WIDTH % 8 == 0)? (EPD_2in13_V3_WIDTH / 8 ): (EPD_2in13_V3_WIDTH / 8 + 1);
 80022a2:	2310      	movs	r3, #16
 80022a4:	817b      	strh	r3, [r7, #10]
    Height = EPD_2in13_V3_HEIGHT;
 80022a6:	23fa      	movs	r3, #250	; 0xfa
 80022a8:	813b      	strh	r3, [r7, #8]
	
    EPD_2in13_V3_SendCommand(0x24);
 80022aa:	2024      	movs	r0, #36	; 0x24
 80022ac:	f7ff fe52 	bl	8001f54 <EPD_2in13_V3_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	81fb      	strh	r3, [r7, #14]
 80022b4:	e019      	b.n	80022ea <EPD_2in13_V3_Display+0x50>
        for (UWORD i = 0; i < Width; i++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	81bb      	strh	r3, [r7, #12]
 80022ba:	e00f      	b.n	80022dc <EPD_2in13_V3_Display+0x42>
            EPD_2in13_V3_SendData(Image[i + j * Width]);
 80022bc:	89ba      	ldrh	r2, [r7, #12]
 80022be:	89fb      	ldrh	r3, [r7, #14]
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fe5d 	bl	8001f90 <EPD_2in13_V3_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80022d6:	89bb      	ldrh	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	81bb      	strh	r3, [r7, #12]
 80022dc:	89ba      	ldrh	r2, [r7, #12]
 80022de:	897b      	ldrh	r3, [r7, #10]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3eb      	bcc.n	80022bc <EPD_2in13_V3_Display+0x22>
    for (UWORD j = 0; j < Height; j++) {
 80022e4:	89fb      	ldrh	r3, [r7, #14]
 80022e6:	3301      	adds	r3, #1
 80022e8:	81fb      	strh	r3, [r7, #14]
 80022ea:	89fa      	ldrh	r2, [r7, #14]
 80022ec:	893b      	ldrh	r3, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d3e1      	bcc.n	80022b6 <EPD_2in13_V3_Display+0x1c>
        }
    }	
	
	EPD_2in13_V3_TurnOnDisplay();	
 80022f2:	f7ff fe8b 	bl	800200c <EPD_2in13_V3_TurnOnDisplay>
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <EPD_2in13_V3_Display_Partial>:
function :	Sends the image buffer in RAM to e-Paper and partial refresh
parameter:
	image : Image data
******************************************************************************/
void EPD_2in13_V3_Display_Partial(UBYTE *Image)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	UWORD Width, Height;
    Width = (EPD_2in13_V3_WIDTH % 8 == 0)? (EPD_2in13_V3_WIDTH / 8 ): (EPD_2in13_V3_WIDTH / 8 + 1);
 8002308:	2310      	movs	r3, #16
 800230a:	817b      	strh	r3, [r7, #10]
    Height = EPD_2in13_V3_HEIGHT;
 800230c:	23fa      	movs	r3, #250	; 0xfa
 800230e:	813b      	strh	r3, [r7, #8]
	
	//Reset
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2102      	movs	r1, #2
 8002314:	4839      	ldr	r0, [pc, #228]	; (80023fc <EPD_2in13_V3_Display_Partial+0xfc>)
 8002316:	f7fe fedf 	bl	80010d8 <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);
 800231a:	2001      	movs	r0, #1
 800231c:	f7fe fc1e 	bl	8000b5c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8002320:	2201      	movs	r2, #1
 8002322:	2102      	movs	r1, #2
 8002324:	4835      	ldr	r0, [pc, #212]	; (80023fc <EPD_2in13_V3_Display_Partial+0xfc>)
 8002326:	f7fe fed7 	bl	80010d8 <HAL_GPIO_WritePin>

	EPD_2IN13_V2_LUT_by_host(WF_PARTIAL_2IN13_V3);
 800232a:	4835      	ldr	r0, [pc, #212]	; (8002400 <EPD_2in13_V3_Display_Partial+0x100>)
 800232c:	f7ff fea9 	bl	8002082 <EPD_2IN13_V2_LUT_by_host>

	EPD_2in13_V3_SendCommand(0x37); 
 8002330:	2037      	movs	r0, #55	; 0x37
 8002332:	f7ff fe0f 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0x00);  
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff fe2a 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);  
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff fe27 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);  
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff fe24 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00); 
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff fe21 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);  
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff fe1e 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x40);  ///RAM Ping-Pong enable 
 8002354:	2040      	movs	r0, #64	; 0x40
 8002356:	f7ff fe1b 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);  
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff fe18 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);   
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff fe15 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);  
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff fe12 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendData(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff fe0f 	bl	8001f90 <EPD_2in13_V3_SendData>

	EPD_2in13_V3_SendCommand(0x3C); //BorderWavefrom
 8002372:	203c      	movs	r0, #60	; 0x3c
 8002374:	f7ff fdee 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0x80);	
 8002378:	2080      	movs	r0, #128	; 0x80
 800237a:	f7ff fe09 	bl	8001f90 <EPD_2in13_V3_SendData>

	EPD_2in13_V3_SendCommand(0x22); //Display Update Sequence Option
 800237e:	2022      	movs	r0, #34	; 0x22
 8002380:	f7ff fde8 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_SendData(0xC0);    // Enable clock and  Enable analog
 8002384:	20c0      	movs	r0, #192	; 0xc0
 8002386:	f7ff fe03 	bl	8001f90 <EPD_2in13_V3_SendData>
	EPD_2in13_V3_SendCommand(0x20);  //Activate Display Update Sequence
 800238a:	2020      	movs	r0, #32
 800238c:	f7ff fde2 	bl	8001f54 <EPD_2in13_V3_SendCommand>
	EPD_2in13_V3_ReadBusy();  
 8002390:	f7ff fe1c 	bl	8001fcc <EPD_2in13_V3_ReadBusy>
	
	EPD_2in13_V3_SetWindows(0, 0, EPD_2in13_V3_WIDTH-1, EPD_2in13_V3_HEIGHT-1);
 8002394:	23f9      	movs	r3, #249	; 0xf9
 8002396:	2279      	movs	r2, #121	; 0x79
 8002398:	2100      	movs	r1, #0
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff feac 	bl	80020f8 <EPD_2in13_V3_SetWindows>
	EPD_2in13_V3_SetCursor(0, 0);
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff fee7 	bl	8002176 <EPD_2in13_V3_SetCursor>

	EPD_2in13_V3_SendCommand(0x24);   //Write Black and White image to RAM
 80023a8:	2024      	movs	r0, #36	; 0x24
 80023aa:	f7ff fdd3 	bl	8001f54 <EPD_2in13_V3_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80023ae:	2300      	movs	r3, #0
 80023b0:	81fb      	strh	r3, [r7, #14]
 80023b2:	e019      	b.n	80023e8 <EPD_2in13_V3_Display_Partial+0xe8>
        for (UWORD i = 0; i < Width; i++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	81bb      	strh	r3, [r7, #12]
 80023b8:	e00f      	b.n	80023da <EPD_2in13_V3_Display_Partial+0xda>
			EPD_2in13_V3_SendData(Image[i + j * Width]);
 80023ba:	89ba      	ldrh	r2, [r7, #12]
 80023bc:	89fb      	ldrh	r3, [r7, #14]
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fdde 	bl	8001f90 <EPD_2in13_V3_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80023d4:	89bb      	ldrh	r3, [r7, #12]
 80023d6:	3301      	adds	r3, #1
 80023d8:	81bb      	strh	r3, [r7, #12]
 80023da:	89ba      	ldrh	r2, [r7, #12]
 80023dc:	897b      	ldrh	r3, [r7, #10]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3eb      	bcc.n	80023ba <EPD_2in13_V3_Display_Partial+0xba>
    for (UWORD j = 0; j < Height; j++) {
 80023e2:	89fb      	ldrh	r3, [r7, #14]
 80023e4:	3301      	adds	r3, #1
 80023e6:	81fb      	strh	r3, [r7, #14]
 80023e8:	89fa      	ldrh	r2, [r7, #14]
 80023ea:	893b      	ldrh	r3, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3e1      	bcc.n	80023b4 <EPD_2in13_V3_Display_Partial+0xb4>
		}
	}
	EPD_2in13_V3_TurnOnDisplay_Partial();
 80023f0:	f7ff fe1b 	bl	800202a <EPD_2in13_V3_TurnOnDisplay_Partial>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40020000 	.word	0x40020000
 8002400:	2000000c 	.word	0x2000000c

08002404 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	817b      	strh	r3, [r7, #10]
 8002416:	460b      	mov	r3, r1
 8002418:	813b      	strh	r3, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <Paint_NewImage+0xa8>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8002424:	4a21      	ldr	r2, [pc, #132]	; (80024ac <Paint_NewImage+0xa8>)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <Paint_NewImage+0xa8>)
 800242c:	897b      	ldrh	r3, [r7, #10]
 800242e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8002430:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <Paint_NewImage+0xa8>)
 8002432:	893b      	ldrh	r3, [r7, #8]
 8002434:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8002436:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <Paint_NewImage+0xa8>)
 8002438:	8b3b      	ldrh	r3, [r7, #24]
 800243a:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <Paint_NewImage+0xa8>)
 800243e:	2202      	movs	r2, #2
 8002440:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <Paint_NewImage+0x52>
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	b29b      	uxth	r3, r3
 8002454:	e004      	b.n	8002460 <Paint_NewImage+0x5c>
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	b29b      	uxth	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	b29b      	uxth	r3, r3
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <Paint_NewImage+0xa8>)
 8002462:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <Paint_NewImage+0xa8>)
 8002466:	893b      	ldrh	r3, [r7, #8]
 8002468:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800246a:	4a10      	ldr	r2, [pc, #64]	; (80024ac <Paint_NewImage+0xa8>)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <Paint_NewImage+0xa8>)
 8002472:	2200      	movs	r2, #0
 8002474:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <Paint_NewImage+0x7e>
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	2bb4      	cmp	r3, #180	; 0xb4
 8002480:	d106      	bne.n	8002490 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <Paint_NewImage+0xa8>)
 8002484:	897b      	ldrh	r3, [r7, #10]
 8002486:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8002488:	4a08      	ldr	r2, [pc, #32]	; (80024ac <Paint_NewImage+0xa8>)
 800248a:	893b      	ldrh	r3, [r7, #8]
 800248c:	80d3      	strh	r3, [r2, #6]
 800248e:	e006      	b.n	800249e <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <Paint_NewImage+0xa8>)
 8002492:	893b      	ldrh	r3, [r7, #8]
 8002494:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <Paint_NewImage+0xa8>)
 8002498:	897b      	ldrh	r3, [r7, #10]
 800249a:	80d3      	strh	r3, [r2, #6]
    }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	2000022c 	.word	0x2000022c

080024b0 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <Paint_SelectImage+0x1c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000022c 	.word	0x2000022c

080024d0 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
 80024da:	460b      	mov	r3, r1
 80024dc:	80bb      	strh	r3, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80024e2:	4b9f      	ldr	r3, [pc, #636]	; (8002760 <Paint_SetPixel+0x290>)
 80024e4:	889b      	ldrh	r3, [r3, #4]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d804      	bhi.n	80024f6 <Paint_SetPixel+0x26>
 80024ec:	4b9c      	ldr	r3, [pc, #624]	; (8002760 <Paint_SetPixel+0x290>)
 80024ee:	88db      	ldrh	r3, [r3, #6]
 80024f0:	88ba      	ldrh	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d903      	bls.n	80024fe <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 80024f6:	489b      	ldr	r0, [pc, #620]	; (8002764 <Paint_SetPixel+0x294>)
 80024f8:	f000 fbc2 	bl	8002c80 <puts>
        return;
 80024fc:	e12d      	b.n	800275a <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80024fe:	4b98      	ldr	r3, [pc, #608]	; (8002760 <Paint_SetPixel+0x290>)
 8002500:	89db      	ldrh	r3, [r3, #14]
 8002502:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002506:	d02b      	beq.n	8002560 <Paint_SetPixel+0x90>
 8002508:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800250c:	f300 8122 	bgt.w	8002754 <Paint_SetPixel+0x284>
 8002510:	2bb4      	cmp	r3, #180	; 0xb4
 8002512:	d016      	beq.n	8002542 <Paint_SetPixel+0x72>
 8002514:	2bb4      	cmp	r3, #180	; 0xb4
 8002516:	f300 811d 	bgt.w	8002754 <Paint_SetPixel+0x284>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <Paint_SetPixel+0x54>
 800251e:	2b5a      	cmp	r3, #90	; 0x5a
 8002520:	d005      	beq.n	800252e <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8002522:	e117      	b.n	8002754 <Paint_SetPixel+0x284>
        X = Xpoint;
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8002528:	88bb      	ldrh	r3, [r7, #4]
 800252a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800252c:	e022      	b.n	8002574 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800252e:	4b8c      	ldr	r3, [pc, #560]	; (8002760 <Paint_SetPixel+0x290>)
 8002530:	891a      	ldrh	r2, [r3, #8]
 8002532:	88bb      	ldrh	r3, [r7, #4]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002540:	e018      	b.n	8002574 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8002542:	4b87      	ldr	r3, [pc, #540]	; (8002760 <Paint_SetPixel+0x290>)
 8002544:	891a      	ldrh	r2, [r3, #8]
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8002550:	4b83      	ldr	r3, [pc, #524]	; (8002760 <Paint_SetPixel+0x290>)
 8002552:	895a      	ldrh	r2, [r3, #10]
 8002554:	88bb      	ldrh	r3, [r7, #4]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800255e:	e009      	b.n	8002574 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8002560:	88bb      	ldrh	r3, [r7, #4]
 8002562:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <Paint_SetPixel+0x290>)
 8002566:	895a      	ldrh	r2, [r3, #10]
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002572:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8002574:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <Paint_SetPixel+0x290>)
 8002576:	8a1b      	ldrh	r3, [r3, #16]
 8002578:	2b03      	cmp	r3, #3
 800257a:	f200 80ed 	bhi.w	8002758 <Paint_SetPixel+0x288>
 800257e:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <Paint_SetPixel+0xb4>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	080025d3 	.word	0x080025d3
 8002588:	08002595 	.word	0x08002595
 800258c:	080025a5 	.word	0x080025a5
 8002590:	080025b5 	.word	0x080025b5
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8002594:	4b72      	ldr	r3, [pc, #456]	; (8002760 <Paint_SetPixel+0x290>)
 8002596:	891a      	ldrh	r2, [r3, #8]
 8002598:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 80025a2:	e017      	b.n	80025d4 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80025a4:	4b6e      	ldr	r3, [pc, #440]	; (8002760 <Paint_SetPixel+0x290>)
 80025a6:	895a      	ldrh	r2, [r3, #10]
 80025a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80025b2:	e00f      	b.n	80025d4 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <Paint_SetPixel+0x290>)
 80025b6:	891a      	ldrh	r2, [r3, #8]
 80025b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 80025c2:	4b67      	ldr	r3, [pc, #412]	; (8002760 <Paint_SetPixel+0x290>)
 80025c4:	895a      	ldrh	r2, [r3, #10]
 80025c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80025d0:	e000      	b.n	80025d4 <Paint_SetPixel+0x104>
        break;
 80025d2:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80025d4:	4b62      	ldr	r3, [pc, #392]	; (8002760 <Paint_SetPixel+0x290>)
 80025d6:	891b      	ldrh	r3, [r3, #8]
 80025d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80025da:	429a      	cmp	r2, r3
 80025dc:	d804      	bhi.n	80025e8 <Paint_SetPixel+0x118>
 80025de:	4b60      	ldr	r3, [pc, #384]	; (8002760 <Paint_SetPixel+0x290>)
 80025e0:	895b      	ldrh	r3, [r3, #10]
 80025e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d903      	bls.n	80025f0 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 80025e8:	485e      	ldr	r0, [pc, #376]	; (8002764 <Paint_SetPixel+0x294>)
 80025ea:	f000 fb49 	bl	8002c80 <puts>
        return;
 80025ee:	e0b4      	b.n	800275a <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 80025f0:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <Paint_SetPixel+0x290>)
 80025f2:	8adb      	ldrh	r3, [r3, #22]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d139      	bne.n	800266c <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80025f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025fa:	08db      	lsrs	r3, r3, #3
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002602:	4a57      	ldr	r2, [pc, #348]	; (8002760 <Paint_SetPixel+0x290>)
 8002604:	8a52      	ldrh	r2, [r2, #18]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	440b      	add	r3, r1
 800260c:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <Paint_SetPixel+0x290>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d113      	bne.n	8002648 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8002620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	fa42 f303 	asr.w	r3, r2, r3
 800262c:	b25b      	sxtb	r3, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	b25a      	sxtb	r2, r3
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4013      	ands	r3, r2
 8002638:	b259      	sxtb	r1, r3
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <Paint_SetPixel+0x290>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	b2ca      	uxtb	r2, r1
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e088      	b.n	800275a <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8002648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	fa42 f303 	asr.w	r3, r2, r3
 8002654:	b25a      	sxtb	r2, r3
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4313      	orrs	r3, r2
 800265c:	b259      	sxtb	r1, r3
 800265e:	4b40      	ldr	r3, [pc, #256]	; (8002760 <Paint_SetPixel+0x290>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e076      	b.n	800275a <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 800266c:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <Paint_SetPixel+0x290>)
 800266e:	8adb      	ldrh	r3, [r3, #22]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d137      	bne.n	80026e4 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8002674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	b29b      	uxth	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800267e:	4a38      	ldr	r2, [pc, #224]	; (8002760 <Paint_SetPixel+0x290>)
 8002680:	8a52      	ldrh	r2, [r2, #18]
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	440b      	add	r3, r1
 8002688:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <Paint_SetPixel+0x290>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800269e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	22c0      	movs	r2, #192	; 0xc0
 80026a8:	fa42 f303 	asr.w	r3, r2, r3
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	b25a      	sxtb	r2, r3
 80026b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026b6:	4013      	ands	r3, r2
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	019a      	lsls	r2, r3, #6
 80026c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa42 f303 	asr.w	r3, r2, r3
 80026cc:	b25a      	sxtb	r2, r3
 80026ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b259      	sxtb	r1, r3
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <Paint_SetPixel+0x290>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4413      	add	r3, r2
 80026de:	b2ca      	uxtb	r2, r1
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e03a      	b.n	800275a <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <Paint_SetPixel+0x290>)
 80026e6:	8adb      	ldrh	r3, [r3, #22]
 80026e8:	2b07      	cmp	r3, #7
 80026ea:	d136      	bne.n	800275a <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80026ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4619      	mov	r1, r3
 80026f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026f6:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <Paint_SetPixel+0x290>)
 80026f8:	8a52      	ldrh	r2, [r2, #18]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	440b      	add	r3, r1
 8002700:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <Paint_SetPixel+0x290>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 800270e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	22f0      	movs	r2, #240	; 0xf0
 8002718:	fa42 f303 	asr.w	r3, r2, r3
 800271c:	b25b      	sxtb	r3, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	b25a      	sxtb	r2, r3
 8002722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002726:	4013      	ands	r3, r2
 8002728:	b25b      	sxtb	r3, r3
 800272a:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	011a      	lsls	r2, r3, #4
 8002730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fa42 f303 	asr.w	r3, r2, r3
 800273c:	b25a      	sxtb	r2, r3
 800273e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002742:	4313      	orrs	r3, r2
 8002744:	b259      	sxtb	r1, r3
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <Paint_SetPixel+0x290>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	4413      	add	r3, r2
 800274e:	b2ca      	uxtb	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e002      	b.n	800275a <Paint_SetPixel+0x28a>
        return;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <Paint_SetPixel+0x28a>
        return;
 8002758:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000022c 	.word	0x2000022c
 8002764:	08003584 	.word	0x08003584

08002768 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8002772:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <Paint_Clear+0x13c>)
 8002774:	8adb      	ldrh	r3, [r3, #22]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d125      	bne.n	80027c6 <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800277a:	2300      	movs	r3, #0
 800277c:	83fb      	strh	r3, [r7, #30]
 800277e:	e01c      	b.n	80027ba <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002780:	2300      	movs	r3, #0
 8002782:	83bb      	strh	r3, [r7, #28]
 8002784:	e011      	b.n	80027aa <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8002786:	8bba      	ldrh	r2, [r7, #28]
 8002788:	8bfb      	ldrh	r3, [r7, #30]
 800278a:	4946      	ldr	r1, [pc, #280]	; (80028a4 <Paint_Clear+0x13c>)
 800278c:	8a49      	ldrh	r1, [r1, #18]
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8002796:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <Paint_Clear+0x13c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4413      	add	r3, r2
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80027a4:	8bbb      	ldrh	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	83bb      	strh	r3, [r7, #28]
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <Paint_Clear+0x13c>)
 80027ac:	8a5b      	ldrh	r3, [r3, #18]
 80027ae:	8bba      	ldrh	r2, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3e8      	bcc.n	8002786 <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80027b4:	8bfb      	ldrh	r3, [r7, #30]
 80027b6:	3301      	adds	r3, #1
 80027b8:	83fb      	strh	r3, [r7, #30]
 80027ba:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <Paint_Clear+0x13c>)
 80027bc:	8a9b      	ldrh	r3, [r3, #20]
 80027be:	8bfa      	ldrh	r2, [r7, #30]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d3dd      	bcc.n	8002780 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 80027c4:	e068      	b.n	8002898 <Paint_Clear+0x130>
    }else if(Paint.Scale == 4) {
 80027c6:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <Paint_Clear+0x13c>)
 80027c8:	8adb      	ldrh	r3, [r3, #22]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d135      	bne.n	800283a <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	837b      	strh	r3, [r7, #26]
 80027d2:	e02c      	b.n	800282e <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80027d4:	2300      	movs	r3, #0
 80027d6:	833b      	strh	r3, [r7, #24]
 80027d8:	e021      	b.n	800281e <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80027da:	8b3a      	ldrh	r2, [r7, #24]
 80027dc:	8b7b      	ldrh	r3, [r7, #26]
 80027de:	4931      	ldr	r1, [pc, #196]	; (80028a4 <Paint_Clear+0x13c>)
 80027e0:	8a49      	ldrh	r1, [r1, #18]
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b25a      	sxtb	r2, r3
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b25a      	sxtb	r2, r3
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	b25b      	sxtb	r3, r3
 8002808:	4313      	orrs	r3, r2
 800280a:	b259      	sxtb	r1, r3
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <Paint_Clear+0x13c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	b2ca      	uxtb	r2, r1
 8002816:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002818:	8b3b      	ldrh	r3, [r7, #24]
 800281a:	3301      	adds	r3, #1
 800281c:	833b      	strh	r3, [r7, #24]
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <Paint_Clear+0x13c>)
 8002820:	8a5b      	ldrh	r3, [r3, #18]
 8002822:	8b3a      	ldrh	r2, [r7, #24]
 8002824:	429a      	cmp	r2, r3
 8002826:	d3d8      	bcc.n	80027da <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002828:	8b7b      	ldrh	r3, [r7, #26]
 800282a:	3301      	adds	r3, #1
 800282c:	837b      	strh	r3, [r7, #26]
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <Paint_Clear+0x13c>)
 8002830:	8a9b      	ldrh	r3, [r3, #20]
 8002832:	8b7a      	ldrh	r2, [r7, #26]
 8002834:	429a      	cmp	r2, r3
 8002836:	d3cd      	bcc.n	80027d4 <Paint_Clear+0x6c>
}
 8002838:	e02e      	b.n	8002898 <Paint_Clear+0x130>
	}else if(Paint.Scale == 7) {
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <Paint_Clear+0x13c>)
 800283c:	8adb      	ldrh	r3, [r3, #22]
 800283e:	2b07      	cmp	r3, #7
 8002840:	d12a      	bne.n	8002898 <Paint_Clear+0x130>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002842:	2300      	movs	r3, #0
 8002844:	82fb      	strh	r3, [r7, #22]
 8002846:	e022      	b.n	800288e <Paint_Clear+0x126>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002848:	2300      	movs	r3, #0
 800284a:	82bb      	strh	r3, [r7, #20]
 800284c:	e017      	b.n	800287e <Paint_Clear+0x116>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800284e:	8aba      	ldrh	r2, [r7, #20]
 8002850:	8afb      	ldrh	r3, [r7, #22]
 8002852:	4914      	ldr	r1, [pc, #80]	; (80028a4 <Paint_Clear+0x13c>)
 8002854:	8a49      	ldrh	r1, [r1, #18]
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	b25a      	sxtb	r2, r3
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	b25b      	sxtb	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b259      	sxtb	r1, r3
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <Paint_Clear+0x13c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	b2ca      	uxtb	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002878:	8abb      	ldrh	r3, [r7, #20]
 800287a:	3301      	adds	r3, #1
 800287c:	82bb      	strh	r3, [r7, #20]
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <Paint_Clear+0x13c>)
 8002880:	8a5b      	ldrh	r3, [r3, #18]
 8002882:	8aba      	ldrh	r2, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	d3e2      	bcc.n	800284e <Paint_Clear+0xe6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002888:	8afb      	ldrh	r3, [r7, #22]
 800288a:	3301      	adds	r3, #1
 800288c:	82fb      	strh	r3, [r7, #22]
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <Paint_Clear+0x13c>)
 8002890:	8a9b      	ldrh	r3, [r3, #20]
 8002892:	8afa      	ldrh	r2, [r7, #22]
 8002894:	429a      	cmp	r2, r3
 8002896:	d3d7      	bcc.n	8002848 <Paint_Clear+0xe0>
}
 8002898:	bf00      	nop
 800289a:	3724      	adds	r7, #36	; 0x24
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	2000022c 	.word	0x2000022c

080028a8 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4604      	mov	r4, r0
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	80fb      	strh	r3, [r7, #6]
 80028ba:	4603      	mov	r3, r0
 80028bc:	80bb      	strh	r3, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	807b      	strh	r3, [r7, #2]
 80028c2:	4613      	mov	r3, r2
 80028c4:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 80028c6:	88bb      	ldrh	r3, [r7, #4]
 80028c8:	81bb      	strh	r3, [r7, #12]
 80028ca:	e012      	b.n	80028f2 <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	81fb      	strh	r3, [r7, #14]
 80028d0:	e008      	b.n	80028e4 <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 80028d2:	8c3a      	ldrh	r2, [r7, #32]
 80028d4:	89b9      	ldrh	r1, [r7, #12]
 80028d6:	89fb      	ldrh	r3, [r7, #14]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fdf9 	bl	80024d0 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 80028de:	89fb      	ldrh	r3, [r7, #14]
 80028e0:	3301      	adds	r3, #1
 80028e2:	81fb      	strh	r3, [r7, #14]
 80028e4:	89fa      	ldrh	r2, [r7, #14]
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d3f2      	bcc.n	80028d2 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 80028ec:	89bb      	ldrh	r3, [r7, #12]
 80028ee:	3301      	adds	r3, #1
 80028f0:	81bb      	strh	r3, [r7, #12]
 80028f2:	89ba      	ldrh	r2, [r7, #12]
 80028f4:	883b      	ldrh	r3, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3e8      	bcc.n	80028cc <Paint_ClearWindows+0x24>
        }
    }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 8002910:	2300      	movs	r3, #0
 8002912:	81bb      	strh	r3, [r7, #12]
 8002914:	e01e      	b.n	8002954 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8002916:	2300      	movs	r3, #0
 8002918:	81fb      	strh	r3, [r7, #14]
 800291a:	e013      	b.n	8002944 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 800291c:	89fa      	ldrh	r2, [r7, #14]
 800291e:	89bb      	ldrh	r3, [r7, #12]
 8002920:	4912      	ldr	r1, [pc, #72]	; (800296c <Paint_DrawBitMap+0x68>)
 8002922:	8a49      	ldrh	r1, [r1, #18]
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	441a      	add	r2, r3
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <Paint_DrawBitMap+0x68>)
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	440b      	add	r3, r1
 800293a:	7812      	ldrb	r2, [r2, #0]
 800293c:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	3301      	adds	r3, #1
 8002942:	81fb      	strh	r3, [r7, #14]
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <Paint_DrawBitMap+0x68>)
 8002946:	8a5b      	ldrh	r3, [r3, #18]
 8002948:	89fa      	ldrh	r2, [r7, #14]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3e6      	bcc.n	800291c <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 800294e:	89bb      	ldrh	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	81bb      	strh	r3, [r7, #12]
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <Paint_DrawBitMap+0x68>)
 8002956:	8a9b      	ldrh	r3, [r3, #20]
 8002958:	89ba      	ldrh	r2, [r7, #12]
 800295a:	429a      	cmp	r2, r3
 800295c:	d3db      	bcc.n	8002916 <Paint_DrawBitMap+0x12>
        }
    }
}
 800295e:	bf00      	nop
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	2000022c 	.word	0x2000022c

08002970 <__errno>:
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <__errno+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2000014c 	.word	0x2000014c

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 fd26 	bl	80033e0 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	080045b0 	.word	0x080045b0
 80029b8:	080045b0 	.word	0x080045b0
 80029bc:	080045b0 	.word	0x080045b0
 80029c0:	080045b4 	.word	0x080045b4

080029c4 <malloc>:
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <malloc+0xc>)
 80029c6:	4601      	mov	r1, r0
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f000 b877 	b.w	8002abc <_malloc_r>
 80029ce:	bf00      	nop
 80029d0:	2000014c 	.word	0x2000014c

080029d4 <memset>:
 80029d4:	4402      	add	r2, r0
 80029d6:	4603      	mov	r3, r0
 80029d8:	4293      	cmp	r3, r2
 80029da:	d100      	bne.n	80029de <memset+0xa>
 80029dc:	4770      	bx	lr
 80029de:	f803 1b01 	strb.w	r1, [r3], #1
 80029e2:	e7f9      	b.n	80029d8 <memset+0x4>

080029e4 <_free_r>:
 80029e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029e6:	2900      	cmp	r1, #0
 80029e8:	d044      	beq.n	8002a74 <_free_r+0x90>
 80029ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029ee:	9001      	str	r0, [sp, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f1a1 0404 	sub.w	r4, r1, #4
 80029f6:	bfb8      	it	lt
 80029f8:	18e4      	addlt	r4, r4, r3
 80029fa:	f000 fc39 	bl	8003270 <__malloc_lock>
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <_free_r+0x94>)
 8002a00:	9801      	ldr	r0, [sp, #4]
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	b933      	cbnz	r3, 8002a14 <_free_r+0x30>
 8002a06:	6063      	str	r3, [r4, #4]
 8002a08:	6014      	str	r4, [r2, #0]
 8002a0a:	b003      	add	sp, #12
 8002a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a10:	f000 bc34 	b.w	800327c <__malloc_unlock>
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	d908      	bls.n	8002a2a <_free_r+0x46>
 8002a18:	6825      	ldr	r5, [r4, #0]
 8002a1a:	1961      	adds	r1, r4, r5
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	bf01      	itttt	eq
 8002a20:	6819      	ldreq	r1, [r3, #0]
 8002a22:	685b      	ldreq	r3, [r3, #4]
 8002a24:	1949      	addeq	r1, r1, r5
 8002a26:	6021      	streq	r1, [r4, #0]
 8002a28:	e7ed      	b.n	8002a06 <_free_r+0x22>
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b10b      	cbz	r3, 8002a34 <_free_r+0x50>
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	d9fa      	bls.n	8002a2a <_free_r+0x46>
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	1855      	adds	r5, r2, r1
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d10b      	bne.n	8002a54 <_free_r+0x70>
 8002a3c:	6824      	ldr	r4, [r4, #0]
 8002a3e:	4421      	add	r1, r4
 8002a40:	1854      	adds	r4, r2, r1
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	d1e0      	bne.n	8002a0a <_free_r+0x26>
 8002a48:	681c      	ldr	r4, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6053      	str	r3, [r2, #4]
 8002a4e:	4421      	add	r1, r4
 8002a50:	6011      	str	r1, [r2, #0]
 8002a52:	e7da      	b.n	8002a0a <_free_r+0x26>
 8002a54:	d902      	bls.n	8002a5c <_free_r+0x78>
 8002a56:	230c      	movs	r3, #12
 8002a58:	6003      	str	r3, [r0, #0]
 8002a5a:	e7d6      	b.n	8002a0a <_free_r+0x26>
 8002a5c:	6825      	ldr	r5, [r4, #0]
 8002a5e:	1961      	adds	r1, r4, r5
 8002a60:	428b      	cmp	r3, r1
 8002a62:	bf04      	itt	eq
 8002a64:	6819      	ldreq	r1, [r3, #0]
 8002a66:	685b      	ldreq	r3, [r3, #4]
 8002a68:	6063      	str	r3, [r4, #4]
 8002a6a:	bf04      	itt	eq
 8002a6c:	1949      	addeq	r1, r1, r5
 8002a6e:	6021      	streq	r1, [r4, #0]
 8002a70:	6054      	str	r4, [r2, #4]
 8002a72:	e7ca      	b.n	8002a0a <_free_r+0x26>
 8002a74:	b003      	add	sp, #12
 8002a76:	bd30      	pop	{r4, r5, pc}
 8002a78:	20000244 	.word	0x20000244

08002a7c <sbrk_aligned>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4e0e      	ldr	r6, [pc, #56]	; (8002ab8 <sbrk_aligned+0x3c>)
 8002a80:	460c      	mov	r4, r1
 8002a82:	6831      	ldr	r1, [r6, #0]
 8002a84:	4605      	mov	r5, r0
 8002a86:	b911      	cbnz	r1, 8002a8e <sbrk_aligned+0x12>
 8002a88:	f000 f902 	bl	8002c90 <_sbrk_r>
 8002a8c:	6030      	str	r0, [r6, #0]
 8002a8e:	4621      	mov	r1, r4
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 f8fd 	bl	8002c90 <_sbrk_r>
 8002a96:	1c43      	adds	r3, r0, #1
 8002a98:	d00a      	beq.n	8002ab0 <sbrk_aligned+0x34>
 8002a9a:	1cc4      	adds	r4, r0, #3
 8002a9c:	f024 0403 	bic.w	r4, r4, #3
 8002aa0:	42a0      	cmp	r0, r4
 8002aa2:	d007      	beq.n	8002ab4 <sbrk_aligned+0x38>
 8002aa4:	1a21      	subs	r1, r4, r0
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f000 f8f2 	bl	8002c90 <_sbrk_r>
 8002aac:	3001      	adds	r0, #1
 8002aae:	d101      	bne.n	8002ab4 <sbrk_aligned+0x38>
 8002ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	20000248 	.word	0x20000248

08002abc <_malloc_r>:
 8002abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac0:	1ccd      	adds	r5, r1, #3
 8002ac2:	f025 0503 	bic.w	r5, r5, #3
 8002ac6:	3508      	adds	r5, #8
 8002ac8:	2d0c      	cmp	r5, #12
 8002aca:	bf38      	it	cc
 8002acc:	250c      	movcc	r5, #12
 8002ace:	2d00      	cmp	r5, #0
 8002ad0:	4607      	mov	r7, r0
 8002ad2:	db01      	blt.n	8002ad8 <_malloc_r+0x1c>
 8002ad4:	42a9      	cmp	r1, r5
 8002ad6:	d905      	bls.n	8002ae4 <_malloc_r+0x28>
 8002ad8:	230c      	movs	r3, #12
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	2600      	movs	r6, #0
 8002ade:	4630      	mov	r0, r6
 8002ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ae4:	4e2e      	ldr	r6, [pc, #184]	; (8002ba0 <_malloc_r+0xe4>)
 8002ae6:	f000 fbc3 	bl	8003270 <__malloc_lock>
 8002aea:	6833      	ldr	r3, [r6, #0]
 8002aec:	461c      	mov	r4, r3
 8002aee:	bb34      	cbnz	r4, 8002b3e <_malloc_r+0x82>
 8002af0:	4629      	mov	r1, r5
 8002af2:	4638      	mov	r0, r7
 8002af4:	f7ff ffc2 	bl	8002a7c <sbrk_aligned>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	4604      	mov	r4, r0
 8002afc:	d14d      	bne.n	8002b9a <_malloc_r+0xde>
 8002afe:	6834      	ldr	r4, [r6, #0]
 8002b00:	4626      	mov	r6, r4
 8002b02:	2e00      	cmp	r6, #0
 8002b04:	d140      	bne.n	8002b88 <_malloc_r+0xcc>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	4631      	mov	r1, r6
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	eb04 0803 	add.w	r8, r4, r3
 8002b10:	f000 f8be 	bl	8002c90 <_sbrk_r>
 8002b14:	4580      	cmp	r8, r0
 8002b16:	d13a      	bne.n	8002b8e <_malloc_r+0xd2>
 8002b18:	6821      	ldr	r1, [r4, #0]
 8002b1a:	3503      	adds	r5, #3
 8002b1c:	1a6d      	subs	r5, r5, r1
 8002b1e:	f025 0503 	bic.w	r5, r5, #3
 8002b22:	3508      	adds	r5, #8
 8002b24:	2d0c      	cmp	r5, #12
 8002b26:	bf38      	it	cc
 8002b28:	250c      	movcc	r5, #12
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4638      	mov	r0, r7
 8002b2e:	f7ff ffa5 	bl	8002a7c <sbrk_aligned>
 8002b32:	3001      	adds	r0, #1
 8002b34:	d02b      	beq.n	8002b8e <_malloc_r+0xd2>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	442b      	add	r3, r5
 8002b3a:	6023      	str	r3, [r4, #0]
 8002b3c:	e00e      	b.n	8002b5c <_malloc_r+0xa0>
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	1b52      	subs	r2, r2, r5
 8002b42:	d41e      	bmi.n	8002b82 <_malloc_r+0xc6>
 8002b44:	2a0b      	cmp	r2, #11
 8002b46:	d916      	bls.n	8002b76 <_malloc_r+0xba>
 8002b48:	1961      	adds	r1, r4, r5
 8002b4a:	42a3      	cmp	r3, r4
 8002b4c:	6025      	str	r5, [r4, #0]
 8002b4e:	bf18      	it	ne
 8002b50:	6059      	strne	r1, [r3, #4]
 8002b52:	6863      	ldr	r3, [r4, #4]
 8002b54:	bf08      	it	eq
 8002b56:	6031      	streq	r1, [r6, #0]
 8002b58:	5162      	str	r2, [r4, r5]
 8002b5a:	604b      	str	r3, [r1, #4]
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	f104 060b 	add.w	r6, r4, #11
 8002b62:	f000 fb8b 	bl	800327c <__malloc_unlock>
 8002b66:	f026 0607 	bic.w	r6, r6, #7
 8002b6a:	1d23      	adds	r3, r4, #4
 8002b6c:	1af2      	subs	r2, r6, r3
 8002b6e:	d0b6      	beq.n	8002ade <_malloc_r+0x22>
 8002b70:	1b9b      	subs	r3, r3, r6
 8002b72:	50a3      	str	r3, [r4, r2]
 8002b74:	e7b3      	b.n	8002ade <_malloc_r+0x22>
 8002b76:	6862      	ldr	r2, [r4, #4]
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	bf0c      	ite	eq
 8002b7c:	6032      	streq	r2, [r6, #0]
 8002b7e:	605a      	strne	r2, [r3, #4]
 8002b80:	e7ec      	b.n	8002b5c <_malloc_r+0xa0>
 8002b82:	4623      	mov	r3, r4
 8002b84:	6864      	ldr	r4, [r4, #4]
 8002b86:	e7b2      	b.n	8002aee <_malloc_r+0x32>
 8002b88:	4634      	mov	r4, r6
 8002b8a:	6876      	ldr	r6, [r6, #4]
 8002b8c:	e7b9      	b.n	8002b02 <_malloc_r+0x46>
 8002b8e:	230c      	movs	r3, #12
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4638      	mov	r0, r7
 8002b94:	f000 fb72 	bl	800327c <__malloc_unlock>
 8002b98:	e7a1      	b.n	8002ade <_malloc_r+0x22>
 8002b9a:	6025      	str	r5, [r4, #0]
 8002b9c:	e7de      	b.n	8002b5c <_malloc_r+0xa0>
 8002b9e:	bf00      	nop
 8002ba0:	20000244 	.word	0x20000244

08002ba4 <_puts_r>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	460e      	mov	r6, r1
 8002ba8:	4605      	mov	r5, r0
 8002baa:	b118      	cbz	r0, 8002bb4 <_puts_r+0x10>
 8002bac:	6983      	ldr	r3, [r0, #24]
 8002bae:	b90b      	cbnz	r3, 8002bb4 <_puts_r+0x10>
 8002bb0:	f000 fa58 	bl	8003064 <__sinit>
 8002bb4:	69ab      	ldr	r3, [r5, #24]
 8002bb6:	68ac      	ldr	r4, [r5, #8]
 8002bb8:	b913      	cbnz	r3, 8002bc0 <_puts_r+0x1c>
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f000 fa52 	bl	8003064 <__sinit>
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <_puts_r+0xd0>)
 8002bc2:	429c      	cmp	r4, r3
 8002bc4:	d120      	bne.n	8002c08 <_puts_r+0x64>
 8002bc6:	686c      	ldr	r4, [r5, #4]
 8002bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bca:	07db      	lsls	r3, r3, #31
 8002bcc:	d405      	bmi.n	8002bda <_puts_r+0x36>
 8002bce:	89a3      	ldrh	r3, [r4, #12]
 8002bd0:	0598      	lsls	r0, r3, #22
 8002bd2:	d402      	bmi.n	8002bda <_puts_r+0x36>
 8002bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bd6:	f000 fae3 	bl	80031a0 <__retarget_lock_acquire_recursive>
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	0719      	lsls	r1, r3, #28
 8002bde:	d51d      	bpl.n	8002c1c <_puts_r+0x78>
 8002be0:	6923      	ldr	r3, [r4, #16]
 8002be2:	b1db      	cbz	r3, 8002c1c <_puts_r+0x78>
 8002be4:	3e01      	subs	r6, #1
 8002be6:	68a3      	ldr	r3, [r4, #8]
 8002be8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bec:	3b01      	subs	r3, #1
 8002bee:	60a3      	str	r3, [r4, #8]
 8002bf0:	bb39      	cbnz	r1, 8002c42 <_puts_r+0x9e>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	da38      	bge.n	8002c68 <_puts_r+0xc4>
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	210a      	movs	r1, #10
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f000 f858 	bl	8002cb0 <__swbuf_r>
 8002c00:	3001      	adds	r0, #1
 8002c02:	d011      	beq.n	8002c28 <_puts_r+0x84>
 8002c04:	250a      	movs	r5, #10
 8002c06:	e011      	b.n	8002c2c <_puts_r+0x88>
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <_puts_r+0xd4>)
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	d101      	bne.n	8002c12 <_puts_r+0x6e>
 8002c0e:	68ac      	ldr	r4, [r5, #8]
 8002c10:	e7da      	b.n	8002bc8 <_puts_r+0x24>
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <_puts_r+0xd8>)
 8002c14:	429c      	cmp	r4, r3
 8002c16:	bf08      	it	eq
 8002c18:	68ec      	ldreq	r4, [r5, #12]
 8002c1a:	e7d5      	b.n	8002bc8 <_puts_r+0x24>
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f000 f898 	bl	8002d54 <__swsetup_r>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d0dd      	beq.n	8002be4 <_puts_r+0x40>
 8002c28:	f04f 35ff 	mov.w	r5, #4294967295
 8002c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c2e:	07da      	lsls	r2, r3, #31
 8002c30:	d405      	bmi.n	8002c3e <_puts_r+0x9a>
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	059b      	lsls	r3, r3, #22
 8002c36:	d402      	bmi.n	8002c3e <_puts_r+0x9a>
 8002c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c3a:	f000 fab2 	bl	80031a2 <__retarget_lock_release_recursive>
 8002c3e:	4628      	mov	r0, r5
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da04      	bge.n	8002c50 <_puts_r+0xac>
 8002c46:	69a2      	ldr	r2, [r4, #24]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dc06      	bgt.n	8002c5a <_puts_r+0xb6>
 8002c4c:	290a      	cmp	r1, #10
 8002c4e:	d004      	beq.n	8002c5a <_puts_r+0xb6>
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	6022      	str	r2, [r4, #0]
 8002c56:	7019      	strb	r1, [r3, #0]
 8002c58:	e7c5      	b.n	8002be6 <_puts_r+0x42>
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f000 f827 	bl	8002cb0 <__swbuf_r>
 8002c62:	3001      	adds	r0, #1
 8002c64:	d1bf      	bne.n	8002be6 <_puts_r+0x42>
 8002c66:	e7df      	b.n	8002c28 <_puts_r+0x84>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	250a      	movs	r5, #10
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	6022      	str	r2, [r4, #0]
 8002c70:	701d      	strb	r5, [r3, #0]
 8002c72:	e7db      	b.n	8002c2c <_puts_r+0x88>
 8002c74:	08004568 	.word	0x08004568
 8002c78:	08004588 	.word	0x08004588
 8002c7c:	08004548 	.word	0x08004548

08002c80 <puts>:
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <puts+0xc>)
 8002c82:	4601      	mov	r1, r0
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	f7ff bf8d 	b.w	8002ba4 <_puts_r>
 8002c8a:	bf00      	nop
 8002c8c:	2000014c 	.word	0x2000014c

08002c90 <_sbrk_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4d06      	ldr	r5, [pc, #24]	; (8002cac <_sbrk_r+0x1c>)
 8002c94:	2300      	movs	r3, #0
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fd fe7a 	bl	8000994 <_sbrk>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_sbrk_r+0x1a>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_sbrk_r+0x1a>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	20000250 	.word	0x20000250

08002cb0 <__swbuf_r>:
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	460e      	mov	r6, r1
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	4605      	mov	r5, r0
 8002cb8:	b118      	cbz	r0, 8002cc2 <__swbuf_r+0x12>
 8002cba:	6983      	ldr	r3, [r0, #24]
 8002cbc:	b90b      	cbnz	r3, 8002cc2 <__swbuf_r+0x12>
 8002cbe:	f000 f9d1 	bl	8003064 <__sinit>
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <__swbuf_r+0x98>)
 8002cc4:	429c      	cmp	r4, r3
 8002cc6:	d12b      	bne.n	8002d20 <__swbuf_r+0x70>
 8002cc8:	686c      	ldr	r4, [r5, #4]
 8002cca:	69a3      	ldr	r3, [r4, #24]
 8002ccc:	60a3      	str	r3, [r4, #8]
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	071a      	lsls	r2, r3, #28
 8002cd2:	d52f      	bpl.n	8002d34 <__swbuf_r+0x84>
 8002cd4:	6923      	ldr	r3, [r4, #16]
 8002cd6:	b36b      	cbz	r3, 8002d34 <__swbuf_r+0x84>
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	6820      	ldr	r0, [r4, #0]
 8002cdc:	1ac0      	subs	r0, r0, r3
 8002cde:	6963      	ldr	r3, [r4, #20]
 8002ce0:	b2f6      	uxtb	r6, r6
 8002ce2:	4283      	cmp	r3, r0
 8002ce4:	4637      	mov	r7, r6
 8002ce6:	dc04      	bgt.n	8002cf2 <__swbuf_r+0x42>
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4628      	mov	r0, r5
 8002cec:	f000 f926 	bl	8002f3c <_fflush_r>
 8002cf0:	bb30      	cbnz	r0, 8002d40 <__swbuf_r+0x90>
 8002cf2:	68a3      	ldr	r3, [r4, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60a3      	str	r3, [r4, #8]
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	6022      	str	r2, [r4, #0]
 8002cfe:	701e      	strb	r6, [r3, #0]
 8002d00:	6963      	ldr	r3, [r4, #20]
 8002d02:	3001      	adds	r0, #1
 8002d04:	4283      	cmp	r3, r0
 8002d06:	d004      	beq.n	8002d12 <__swbuf_r+0x62>
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	07db      	lsls	r3, r3, #31
 8002d0c:	d506      	bpl.n	8002d1c <__swbuf_r+0x6c>
 8002d0e:	2e0a      	cmp	r6, #10
 8002d10:	d104      	bne.n	8002d1c <__swbuf_r+0x6c>
 8002d12:	4621      	mov	r1, r4
 8002d14:	4628      	mov	r0, r5
 8002d16:	f000 f911 	bl	8002f3c <_fflush_r>
 8002d1a:	b988      	cbnz	r0, 8002d40 <__swbuf_r+0x90>
 8002d1c:	4638      	mov	r0, r7
 8002d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <__swbuf_r+0x9c>)
 8002d22:	429c      	cmp	r4, r3
 8002d24:	d101      	bne.n	8002d2a <__swbuf_r+0x7a>
 8002d26:	68ac      	ldr	r4, [r5, #8]
 8002d28:	e7cf      	b.n	8002cca <__swbuf_r+0x1a>
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <__swbuf_r+0xa0>)
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	bf08      	it	eq
 8002d30:	68ec      	ldreq	r4, [r5, #12]
 8002d32:	e7ca      	b.n	8002cca <__swbuf_r+0x1a>
 8002d34:	4621      	mov	r1, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 f80c 	bl	8002d54 <__swsetup_r>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d0cb      	beq.n	8002cd8 <__swbuf_r+0x28>
 8002d40:	f04f 37ff 	mov.w	r7, #4294967295
 8002d44:	e7ea      	b.n	8002d1c <__swbuf_r+0x6c>
 8002d46:	bf00      	nop
 8002d48:	08004568 	.word	0x08004568
 8002d4c:	08004588 	.word	0x08004588
 8002d50:	08004548 	.word	0x08004548

08002d54 <__swsetup_r>:
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <__swsetup_r+0xcc>)
 8002d56:	b570      	push	{r4, r5, r6, lr}
 8002d58:	681d      	ldr	r5, [r3, #0]
 8002d5a:	4606      	mov	r6, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	b125      	cbz	r5, 8002d6a <__swsetup_r+0x16>
 8002d60:	69ab      	ldr	r3, [r5, #24]
 8002d62:	b913      	cbnz	r3, 8002d6a <__swsetup_r+0x16>
 8002d64:	4628      	mov	r0, r5
 8002d66:	f000 f97d 	bl	8003064 <__sinit>
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <__swsetup_r+0xd0>)
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	d10f      	bne.n	8002d90 <__swsetup_r+0x3c>
 8002d70:	686c      	ldr	r4, [r5, #4]
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d78:	0719      	lsls	r1, r3, #28
 8002d7a:	d42c      	bmi.n	8002dd6 <__swsetup_r+0x82>
 8002d7c:	06dd      	lsls	r5, r3, #27
 8002d7e:	d411      	bmi.n	8002da4 <__swsetup_r+0x50>
 8002d80:	2309      	movs	r3, #9
 8002d82:	6033      	str	r3, [r6, #0]
 8002d84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d88:	81a3      	strh	r3, [r4, #12]
 8002d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8e:	e03e      	b.n	8002e0e <__swsetup_r+0xba>
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <__swsetup_r+0xd4>)
 8002d92:	429c      	cmp	r4, r3
 8002d94:	d101      	bne.n	8002d9a <__swsetup_r+0x46>
 8002d96:	68ac      	ldr	r4, [r5, #8]
 8002d98:	e7eb      	b.n	8002d72 <__swsetup_r+0x1e>
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <__swsetup_r+0xd8>)
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	bf08      	it	eq
 8002da0:	68ec      	ldreq	r4, [r5, #12]
 8002da2:	e7e6      	b.n	8002d72 <__swsetup_r+0x1e>
 8002da4:	0758      	lsls	r0, r3, #29
 8002da6:	d512      	bpl.n	8002dce <__swsetup_r+0x7a>
 8002da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002daa:	b141      	cbz	r1, 8002dbe <__swsetup_r+0x6a>
 8002dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002db0:	4299      	cmp	r1, r3
 8002db2:	d002      	beq.n	8002dba <__swsetup_r+0x66>
 8002db4:	4630      	mov	r0, r6
 8002db6:	f7ff fe15 	bl	80029e4 <_free_r>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6363      	str	r3, [r4, #52]	; 0x34
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002dc4:	81a3      	strh	r3, [r4, #12]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6063      	str	r3, [r4, #4]
 8002dca:	6923      	ldr	r3, [r4, #16]
 8002dcc:	6023      	str	r3, [r4, #0]
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	81a3      	strh	r3, [r4, #12]
 8002dd6:	6923      	ldr	r3, [r4, #16]
 8002dd8:	b94b      	cbnz	r3, 8002dee <__swsetup_r+0x9a>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de4:	d003      	beq.n	8002dee <__swsetup_r+0x9a>
 8002de6:	4621      	mov	r1, r4
 8002de8:	4630      	mov	r0, r6
 8002dea:	f000 fa01 	bl	80031f0 <__smakebuf_r>
 8002dee:	89a0      	ldrh	r0, [r4, #12]
 8002df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002df4:	f010 0301 	ands.w	r3, r0, #1
 8002df8:	d00a      	beq.n	8002e10 <__swsetup_r+0xbc>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60a3      	str	r3, [r4, #8]
 8002dfe:	6963      	ldr	r3, [r4, #20]
 8002e00:	425b      	negs	r3, r3
 8002e02:	61a3      	str	r3, [r4, #24]
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	b943      	cbnz	r3, 8002e1a <__swsetup_r+0xc6>
 8002e08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e0c:	d1ba      	bne.n	8002d84 <__swsetup_r+0x30>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	0781      	lsls	r1, r0, #30
 8002e12:	bf58      	it	pl
 8002e14:	6963      	ldrpl	r3, [r4, #20]
 8002e16:	60a3      	str	r3, [r4, #8]
 8002e18:	e7f4      	b.n	8002e04 <__swsetup_r+0xb0>
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	e7f7      	b.n	8002e0e <__swsetup_r+0xba>
 8002e1e:	bf00      	nop
 8002e20:	2000014c 	.word	0x2000014c
 8002e24:	08004568 	.word	0x08004568
 8002e28:	08004588 	.word	0x08004588
 8002e2c:	08004548 	.word	0x08004548

08002e30 <__sflush_r>:
 8002e30:	898a      	ldrh	r2, [r1, #12]
 8002e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e36:	4605      	mov	r5, r0
 8002e38:	0710      	lsls	r0, r2, #28
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	d458      	bmi.n	8002ef0 <__sflush_r+0xc0>
 8002e3e:	684b      	ldr	r3, [r1, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	dc05      	bgt.n	8002e50 <__sflush_r+0x20>
 8002e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	dc02      	bgt.n	8002e50 <__sflush_r+0x20>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e52:	2e00      	cmp	r6, #0
 8002e54:	d0f9      	beq.n	8002e4a <__sflush_r+0x1a>
 8002e56:	2300      	movs	r3, #0
 8002e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e5c:	682f      	ldr	r7, [r5, #0]
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	d032      	beq.n	8002ec8 <__sflush_r+0x98>
 8002e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	075a      	lsls	r2, r3, #29
 8002e68:	d505      	bpl.n	8002e76 <__sflush_r+0x46>
 8002e6a:	6863      	ldr	r3, [r4, #4]
 8002e6c:	1ac0      	subs	r0, r0, r3
 8002e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e70:	b10b      	cbz	r3, 8002e76 <__sflush_r+0x46>
 8002e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e74:	1ac0      	subs	r0, r0, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e7c:	6a21      	ldr	r1, [r4, #32]
 8002e7e:	4628      	mov	r0, r5
 8002e80:	47b0      	blx	r6
 8002e82:	1c43      	adds	r3, r0, #1
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	d106      	bne.n	8002e96 <__sflush_r+0x66>
 8002e88:	6829      	ldr	r1, [r5, #0]
 8002e8a:	291d      	cmp	r1, #29
 8002e8c:	d82c      	bhi.n	8002ee8 <__sflush_r+0xb8>
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <__sflush_r+0x108>)
 8002e90:	40ca      	lsrs	r2, r1
 8002e92:	07d6      	lsls	r6, r2, #31
 8002e94:	d528      	bpl.n	8002ee8 <__sflush_r+0xb8>
 8002e96:	2200      	movs	r2, #0
 8002e98:	6062      	str	r2, [r4, #4]
 8002e9a:	04d9      	lsls	r1, r3, #19
 8002e9c:	6922      	ldr	r2, [r4, #16]
 8002e9e:	6022      	str	r2, [r4, #0]
 8002ea0:	d504      	bpl.n	8002eac <__sflush_r+0x7c>
 8002ea2:	1c42      	adds	r2, r0, #1
 8002ea4:	d101      	bne.n	8002eaa <__sflush_r+0x7a>
 8002ea6:	682b      	ldr	r3, [r5, #0]
 8002ea8:	b903      	cbnz	r3, 8002eac <__sflush_r+0x7c>
 8002eaa:	6560      	str	r0, [r4, #84]	; 0x54
 8002eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eae:	602f      	str	r7, [r5, #0]
 8002eb0:	2900      	cmp	r1, #0
 8002eb2:	d0ca      	beq.n	8002e4a <__sflush_r+0x1a>
 8002eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eb8:	4299      	cmp	r1, r3
 8002eba:	d002      	beq.n	8002ec2 <__sflush_r+0x92>
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f7ff fd91 	bl	80029e4 <_free_r>
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8002ec6:	e7c1      	b.n	8002e4c <__sflush_r+0x1c>
 8002ec8:	6a21      	ldr	r1, [r4, #32]
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4628      	mov	r0, r5
 8002ece:	47b0      	blx	r6
 8002ed0:	1c41      	adds	r1, r0, #1
 8002ed2:	d1c7      	bne.n	8002e64 <__sflush_r+0x34>
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0c4      	beq.n	8002e64 <__sflush_r+0x34>
 8002eda:	2b1d      	cmp	r3, #29
 8002edc:	d001      	beq.n	8002ee2 <__sflush_r+0xb2>
 8002ede:	2b16      	cmp	r3, #22
 8002ee0:	d101      	bne.n	8002ee6 <__sflush_r+0xb6>
 8002ee2:	602f      	str	r7, [r5, #0]
 8002ee4:	e7b1      	b.n	8002e4a <__sflush_r+0x1a>
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eec:	81a3      	strh	r3, [r4, #12]
 8002eee:	e7ad      	b.n	8002e4c <__sflush_r+0x1c>
 8002ef0:	690f      	ldr	r7, [r1, #16]
 8002ef2:	2f00      	cmp	r7, #0
 8002ef4:	d0a9      	beq.n	8002e4a <__sflush_r+0x1a>
 8002ef6:	0793      	lsls	r3, r2, #30
 8002ef8:	680e      	ldr	r6, [r1, #0]
 8002efa:	bf08      	it	eq
 8002efc:	694b      	ldreq	r3, [r1, #20]
 8002efe:	600f      	str	r7, [r1, #0]
 8002f00:	bf18      	it	ne
 8002f02:	2300      	movne	r3, #0
 8002f04:	eba6 0807 	sub.w	r8, r6, r7
 8002f08:	608b      	str	r3, [r1, #8]
 8002f0a:	f1b8 0f00 	cmp.w	r8, #0
 8002f0e:	dd9c      	ble.n	8002e4a <__sflush_r+0x1a>
 8002f10:	6a21      	ldr	r1, [r4, #32]
 8002f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f14:	4643      	mov	r3, r8
 8002f16:	463a      	mov	r2, r7
 8002f18:	4628      	mov	r0, r5
 8002f1a:	47b0      	blx	r6
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	dc06      	bgt.n	8002f2e <__sflush_r+0xfe>
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	e78e      	b.n	8002e4c <__sflush_r+0x1c>
 8002f2e:	4407      	add	r7, r0
 8002f30:	eba8 0800 	sub.w	r8, r8, r0
 8002f34:	e7e9      	b.n	8002f0a <__sflush_r+0xda>
 8002f36:	bf00      	nop
 8002f38:	20400001 	.word	0x20400001

08002f3c <_fflush_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	690b      	ldr	r3, [r1, #16]
 8002f40:	4605      	mov	r5, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	b913      	cbnz	r3, 8002f4c <_fflush_r+0x10>
 8002f46:	2500      	movs	r5, #0
 8002f48:	4628      	mov	r0, r5
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	b118      	cbz	r0, 8002f56 <_fflush_r+0x1a>
 8002f4e:	6983      	ldr	r3, [r0, #24]
 8002f50:	b90b      	cbnz	r3, 8002f56 <_fflush_r+0x1a>
 8002f52:	f000 f887 	bl	8003064 <__sinit>
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <_fflush_r+0x6c>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d11b      	bne.n	8002f94 <_fflush_r+0x58>
 8002f5c:	686c      	ldr	r4, [r5, #4]
 8002f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ef      	beq.n	8002f46 <_fflush_r+0xa>
 8002f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f68:	07d0      	lsls	r0, r2, #31
 8002f6a:	d404      	bmi.n	8002f76 <_fflush_r+0x3a>
 8002f6c:	0599      	lsls	r1, r3, #22
 8002f6e:	d402      	bmi.n	8002f76 <_fflush_r+0x3a>
 8002f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f72:	f000 f915 	bl	80031a0 <__retarget_lock_acquire_recursive>
 8002f76:	4628      	mov	r0, r5
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f7ff ff59 	bl	8002e30 <__sflush_r>
 8002f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f80:	07da      	lsls	r2, r3, #31
 8002f82:	4605      	mov	r5, r0
 8002f84:	d4e0      	bmi.n	8002f48 <_fflush_r+0xc>
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	059b      	lsls	r3, r3, #22
 8002f8a:	d4dd      	bmi.n	8002f48 <_fflush_r+0xc>
 8002f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f8e:	f000 f908 	bl	80031a2 <__retarget_lock_release_recursive>
 8002f92:	e7d9      	b.n	8002f48 <_fflush_r+0xc>
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <_fflush_r+0x70>)
 8002f96:	429c      	cmp	r4, r3
 8002f98:	d101      	bne.n	8002f9e <_fflush_r+0x62>
 8002f9a:	68ac      	ldr	r4, [r5, #8]
 8002f9c:	e7df      	b.n	8002f5e <_fflush_r+0x22>
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <_fflush_r+0x74>)
 8002fa0:	429c      	cmp	r4, r3
 8002fa2:	bf08      	it	eq
 8002fa4:	68ec      	ldreq	r4, [r5, #12]
 8002fa6:	e7da      	b.n	8002f5e <_fflush_r+0x22>
 8002fa8:	08004568 	.word	0x08004568
 8002fac:	08004588 	.word	0x08004588
 8002fb0:	08004548 	.word	0x08004548

08002fb4 <std>:
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	b510      	push	{r4, lr}
 8002fb8:	4604      	mov	r4, r0
 8002fba:	e9c0 3300 	strd	r3, r3, [r0]
 8002fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fc2:	6083      	str	r3, [r0, #8]
 8002fc4:	8181      	strh	r1, [r0, #12]
 8002fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8002fc8:	81c2      	strh	r2, [r0, #14]
 8002fca:	6183      	str	r3, [r0, #24]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	2208      	movs	r2, #8
 8002fd0:	305c      	adds	r0, #92	; 0x5c
 8002fd2:	f7ff fcff 	bl	80029d4 <memset>
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <std+0x38>)
 8002fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <std+0x3c>)
 8002fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <std+0x40>)
 8002fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <std+0x44>)
 8002fe4:	6224      	str	r4, [r4, #32]
 8002fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	bf00      	nop
 8002fec:	08003289 	.word	0x08003289
 8002ff0:	080032ab 	.word	0x080032ab
 8002ff4:	080032e3 	.word	0x080032e3
 8002ff8:	08003307 	.word	0x08003307

08002ffc <_cleanup_r>:
 8002ffc:	4901      	ldr	r1, [pc, #4]	; (8003004 <_cleanup_r+0x8>)
 8002ffe:	f000 b8af 	b.w	8003160 <_fwalk_reent>
 8003002:	bf00      	nop
 8003004:	08002f3d 	.word	0x08002f3d

08003008 <__sfmoreglue>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	2268      	movs	r2, #104	; 0x68
 800300c:	1e4d      	subs	r5, r1, #1
 800300e:	4355      	muls	r5, r2
 8003010:	460e      	mov	r6, r1
 8003012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003016:	f7ff fd51 	bl	8002abc <_malloc_r>
 800301a:	4604      	mov	r4, r0
 800301c:	b140      	cbz	r0, 8003030 <__sfmoreglue+0x28>
 800301e:	2100      	movs	r1, #0
 8003020:	e9c0 1600 	strd	r1, r6, [r0]
 8003024:	300c      	adds	r0, #12
 8003026:	60a0      	str	r0, [r4, #8]
 8003028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800302c:	f7ff fcd2 	bl	80029d4 <memset>
 8003030:	4620      	mov	r0, r4
 8003032:	bd70      	pop	{r4, r5, r6, pc}

08003034 <__sfp_lock_acquire>:
 8003034:	4801      	ldr	r0, [pc, #4]	; (800303c <__sfp_lock_acquire+0x8>)
 8003036:	f000 b8b3 	b.w	80031a0 <__retarget_lock_acquire_recursive>
 800303a:	bf00      	nop
 800303c:	2000024d 	.word	0x2000024d

08003040 <__sfp_lock_release>:
 8003040:	4801      	ldr	r0, [pc, #4]	; (8003048 <__sfp_lock_release+0x8>)
 8003042:	f000 b8ae 	b.w	80031a2 <__retarget_lock_release_recursive>
 8003046:	bf00      	nop
 8003048:	2000024d 	.word	0x2000024d

0800304c <__sinit_lock_acquire>:
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <__sinit_lock_acquire+0x8>)
 800304e:	f000 b8a7 	b.w	80031a0 <__retarget_lock_acquire_recursive>
 8003052:	bf00      	nop
 8003054:	2000024e 	.word	0x2000024e

08003058 <__sinit_lock_release>:
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <__sinit_lock_release+0x8>)
 800305a:	f000 b8a2 	b.w	80031a2 <__retarget_lock_release_recursive>
 800305e:	bf00      	nop
 8003060:	2000024e 	.word	0x2000024e

08003064 <__sinit>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	f7ff fff0 	bl	800304c <__sinit_lock_acquire>
 800306c:	69a3      	ldr	r3, [r4, #24]
 800306e:	b11b      	cbz	r3, 8003078 <__sinit+0x14>
 8003070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003074:	f7ff bff0 	b.w	8003058 <__sinit_lock_release>
 8003078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800307c:	6523      	str	r3, [r4, #80]	; 0x50
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <__sinit+0x68>)
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <__sinit+0x6c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	62a2      	str	r2, [r4, #40]	; 0x28
 8003086:	42a3      	cmp	r3, r4
 8003088:	bf04      	itt	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	61a3      	streq	r3, [r4, #24]
 800308e:	4620      	mov	r0, r4
 8003090:	f000 f820 	bl	80030d4 <__sfp>
 8003094:	6060      	str	r0, [r4, #4]
 8003096:	4620      	mov	r0, r4
 8003098:	f000 f81c 	bl	80030d4 <__sfp>
 800309c:	60a0      	str	r0, [r4, #8]
 800309e:	4620      	mov	r0, r4
 80030a0:	f000 f818 	bl	80030d4 <__sfp>
 80030a4:	2200      	movs	r2, #0
 80030a6:	60e0      	str	r0, [r4, #12]
 80030a8:	2104      	movs	r1, #4
 80030aa:	6860      	ldr	r0, [r4, #4]
 80030ac:	f7ff ff82 	bl	8002fb4 <std>
 80030b0:	68a0      	ldr	r0, [r4, #8]
 80030b2:	2201      	movs	r2, #1
 80030b4:	2109      	movs	r1, #9
 80030b6:	f7ff ff7d 	bl	8002fb4 <std>
 80030ba:	68e0      	ldr	r0, [r4, #12]
 80030bc:	2202      	movs	r2, #2
 80030be:	2112      	movs	r1, #18
 80030c0:	f7ff ff78 	bl	8002fb4 <std>
 80030c4:	2301      	movs	r3, #1
 80030c6:	61a3      	str	r3, [r4, #24]
 80030c8:	e7d2      	b.n	8003070 <__sinit+0xc>
 80030ca:	bf00      	nop
 80030cc:	08004544 	.word	0x08004544
 80030d0:	08002ffd 	.word	0x08002ffd

080030d4 <__sfp>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	4607      	mov	r7, r0
 80030d8:	f7ff ffac 	bl	8003034 <__sfp_lock_acquire>
 80030dc:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <__sfp+0x84>)
 80030de:	681e      	ldr	r6, [r3, #0]
 80030e0:	69b3      	ldr	r3, [r6, #24]
 80030e2:	b913      	cbnz	r3, 80030ea <__sfp+0x16>
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7ff ffbd 	bl	8003064 <__sinit>
 80030ea:	3648      	adds	r6, #72	; 0x48
 80030ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	d503      	bpl.n	80030fc <__sfp+0x28>
 80030f4:	6833      	ldr	r3, [r6, #0]
 80030f6:	b30b      	cbz	r3, 800313c <__sfp+0x68>
 80030f8:	6836      	ldr	r6, [r6, #0]
 80030fa:	e7f7      	b.n	80030ec <__sfp+0x18>
 80030fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003100:	b9d5      	cbnz	r5, 8003138 <__sfp+0x64>
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <__sfp+0x88>)
 8003104:	60e3      	str	r3, [r4, #12]
 8003106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800310a:	6665      	str	r5, [r4, #100]	; 0x64
 800310c:	f000 f847 	bl	800319e <__retarget_lock_init_recursive>
 8003110:	f7ff ff96 	bl	8003040 <__sfp_lock_release>
 8003114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800311c:	6025      	str	r5, [r4, #0]
 800311e:	61a5      	str	r5, [r4, #24]
 8003120:	2208      	movs	r2, #8
 8003122:	4629      	mov	r1, r5
 8003124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003128:	f7ff fc54 	bl	80029d4 <memset>
 800312c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003134:	4620      	mov	r0, r4
 8003136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003138:	3468      	adds	r4, #104	; 0x68
 800313a:	e7d9      	b.n	80030f0 <__sfp+0x1c>
 800313c:	2104      	movs	r1, #4
 800313e:	4638      	mov	r0, r7
 8003140:	f7ff ff62 	bl	8003008 <__sfmoreglue>
 8003144:	4604      	mov	r4, r0
 8003146:	6030      	str	r0, [r6, #0]
 8003148:	2800      	cmp	r0, #0
 800314a:	d1d5      	bne.n	80030f8 <__sfp+0x24>
 800314c:	f7ff ff78 	bl	8003040 <__sfp_lock_release>
 8003150:	230c      	movs	r3, #12
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	e7ee      	b.n	8003134 <__sfp+0x60>
 8003156:	bf00      	nop
 8003158:	08004544 	.word	0x08004544
 800315c:	ffff0001 	.word	0xffff0001

08003160 <_fwalk_reent>:
 8003160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003164:	4606      	mov	r6, r0
 8003166:	4688      	mov	r8, r1
 8003168:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800316c:	2700      	movs	r7, #0
 800316e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003172:	f1b9 0901 	subs.w	r9, r9, #1
 8003176:	d505      	bpl.n	8003184 <_fwalk_reent+0x24>
 8003178:	6824      	ldr	r4, [r4, #0]
 800317a:	2c00      	cmp	r4, #0
 800317c:	d1f7      	bne.n	800316e <_fwalk_reent+0xe>
 800317e:	4638      	mov	r0, r7
 8003180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003184:	89ab      	ldrh	r3, [r5, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d907      	bls.n	800319a <_fwalk_reent+0x3a>
 800318a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800318e:	3301      	adds	r3, #1
 8003190:	d003      	beq.n	800319a <_fwalk_reent+0x3a>
 8003192:	4629      	mov	r1, r5
 8003194:	4630      	mov	r0, r6
 8003196:	47c0      	blx	r8
 8003198:	4307      	orrs	r7, r0
 800319a:	3568      	adds	r5, #104	; 0x68
 800319c:	e7e9      	b.n	8003172 <_fwalk_reent+0x12>

0800319e <__retarget_lock_init_recursive>:
 800319e:	4770      	bx	lr

080031a0 <__retarget_lock_acquire_recursive>:
 80031a0:	4770      	bx	lr

080031a2 <__retarget_lock_release_recursive>:
 80031a2:	4770      	bx	lr

080031a4 <__swhatbuf_r>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	460e      	mov	r6, r1
 80031a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ac:	2900      	cmp	r1, #0
 80031ae:	b096      	sub	sp, #88	; 0x58
 80031b0:	4614      	mov	r4, r2
 80031b2:	461d      	mov	r5, r3
 80031b4:	da08      	bge.n	80031c8 <__swhatbuf_r+0x24>
 80031b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	602a      	str	r2, [r5, #0]
 80031be:	061a      	lsls	r2, r3, #24
 80031c0:	d410      	bmi.n	80031e4 <__swhatbuf_r+0x40>
 80031c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c6:	e00e      	b.n	80031e6 <__swhatbuf_r+0x42>
 80031c8:	466a      	mov	r2, sp
 80031ca:	f000 f8c3 	bl	8003354 <_fstat_r>
 80031ce:	2800      	cmp	r0, #0
 80031d0:	dbf1      	blt.n	80031b6 <__swhatbuf_r+0x12>
 80031d2:	9a01      	ldr	r2, [sp, #4]
 80031d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031dc:	425a      	negs	r2, r3
 80031de:	415a      	adcs	r2, r3
 80031e0:	602a      	str	r2, [r5, #0]
 80031e2:	e7ee      	b.n	80031c2 <__swhatbuf_r+0x1e>
 80031e4:	2340      	movs	r3, #64	; 0x40
 80031e6:	2000      	movs	r0, #0
 80031e8:	6023      	str	r3, [r4, #0]
 80031ea:	b016      	add	sp, #88	; 0x58
 80031ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080031f0 <__smakebuf_r>:
 80031f0:	898b      	ldrh	r3, [r1, #12]
 80031f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031f4:	079d      	lsls	r5, r3, #30
 80031f6:	4606      	mov	r6, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	d507      	bpl.n	800320c <__smakebuf_r+0x1c>
 80031fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	6123      	str	r3, [r4, #16]
 8003204:	2301      	movs	r3, #1
 8003206:	6163      	str	r3, [r4, #20]
 8003208:	b002      	add	sp, #8
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	ab01      	add	r3, sp, #4
 800320e:	466a      	mov	r2, sp
 8003210:	f7ff ffc8 	bl	80031a4 <__swhatbuf_r>
 8003214:	9900      	ldr	r1, [sp, #0]
 8003216:	4605      	mov	r5, r0
 8003218:	4630      	mov	r0, r6
 800321a:	f7ff fc4f 	bl	8002abc <_malloc_r>
 800321e:	b948      	cbnz	r0, 8003234 <__smakebuf_r+0x44>
 8003220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003224:	059a      	lsls	r2, r3, #22
 8003226:	d4ef      	bmi.n	8003208 <__smakebuf_r+0x18>
 8003228:	f023 0303 	bic.w	r3, r3, #3
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	81a3      	strh	r3, [r4, #12]
 8003232:	e7e3      	b.n	80031fc <__smakebuf_r+0xc>
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <__smakebuf_r+0x7c>)
 8003236:	62b3      	str	r3, [r6, #40]	; 0x28
 8003238:	89a3      	ldrh	r3, [r4, #12]
 800323a:	6020      	str	r0, [r4, #0]
 800323c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003240:	81a3      	strh	r3, [r4, #12]
 8003242:	9b00      	ldr	r3, [sp, #0]
 8003244:	6163      	str	r3, [r4, #20]
 8003246:	9b01      	ldr	r3, [sp, #4]
 8003248:	6120      	str	r0, [r4, #16]
 800324a:	b15b      	cbz	r3, 8003264 <__smakebuf_r+0x74>
 800324c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003250:	4630      	mov	r0, r6
 8003252:	f000 f891 	bl	8003378 <_isatty_r>
 8003256:	b128      	cbz	r0, 8003264 <__smakebuf_r+0x74>
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	81a3      	strh	r3, [r4, #12]
 8003264:	89a0      	ldrh	r0, [r4, #12]
 8003266:	4305      	orrs	r5, r0
 8003268:	81a5      	strh	r5, [r4, #12]
 800326a:	e7cd      	b.n	8003208 <__smakebuf_r+0x18>
 800326c:	08002ffd 	.word	0x08002ffd

08003270 <__malloc_lock>:
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <__malloc_lock+0x8>)
 8003272:	f7ff bf95 	b.w	80031a0 <__retarget_lock_acquire_recursive>
 8003276:	bf00      	nop
 8003278:	2000024c 	.word	0x2000024c

0800327c <__malloc_unlock>:
 800327c:	4801      	ldr	r0, [pc, #4]	; (8003284 <__malloc_unlock+0x8>)
 800327e:	f7ff bf90 	b.w	80031a2 <__retarget_lock_release_recursive>
 8003282:	bf00      	nop
 8003284:	2000024c 	.word	0x2000024c

08003288 <__sread>:
 8003288:	b510      	push	{r4, lr}
 800328a:	460c      	mov	r4, r1
 800328c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003290:	f000 f894 	bl	80033bc <_read_r>
 8003294:	2800      	cmp	r0, #0
 8003296:	bfab      	itete	ge
 8003298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800329a:	89a3      	ldrhlt	r3, [r4, #12]
 800329c:	181b      	addge	r3, r3, r0
 800329e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032a2:	bfac      	ite	ge
 80032a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80032a6:	81a3      	strhlt	r3, [r4, #12]
 80032a8:	bd10      	pop	{r4, pc}

080032aa <__swrite>:
 80032aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ae:	461f      	mov	r7, r3
 80032b0:	898b      	ldrh	r3, [r1, #12]
 80032b2:	05db      	lsls	r3, r3, #23
 80032b4:	4605      	mov	r5, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4616      	mov	r6, r2
 80032ba:	d505      	bpl.n	80032c8 <__swrite+0x1e>
 80032bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c0:	2302      	movs	r3, #2
 80032c2:	2200      	movs	r2, #0
 80032c4:	f000 f868 	bl	8003398 <_lseek_r>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	4632      	mov	r2, r6
 80032d6:	463b      	mov	r3, r7
 80032d8:	4628      	mov	r0, r5
 80032da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032de:	f000 b817 	b.w	8003310 <_write_r>

080032e2 <__sseek>:
 80032e2:	b510      	push	{r4, lr}
 80032e4:	460c      	mov	r4, r1
 80032e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ea:	f000 f855 	bl	8003398 <_lseek_r>
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	bf15      	itete	ne
 80032f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80032f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032fe:	81a3      	strheq	r3, [r4, #12]
 8003300:	bf18      	it	ne
 8003302:	81a3      	strhne	r3, [r4, #12]
 8003304:	bd10      	pop	{r4, pc}

08003306 <__sclose>:
 8003306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800330a:	f000 b813 	b.w	8003334 <_close_r>
	...

08003310 <_write_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4d07      	ldr	r5, [pc, #28]	; (8003330 <_write_r+0x20>)
 8003314:	4604      	mov	r4, r0
 8003316:	4608      	mov	r0, r1
 8003318:	4611      	mov	r1, r2
 800331a:	2200      	movs	r2, #0
 800331c:	602a      	str	r2, [r5, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	f7fd fae7 	bl	80008f2 <_write>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_write_r+0x1e>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_write_r+0x1e>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	20000250 	.word	0x20000250

08003334 <_close_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4d06      	ldr	r5, [pc, #24]	; (8003350 <_close_r+0x1c>)
 8003338:	2300      	movs	r3, #0
 800333a:	4604      	mov	r4, r0
 800333c:	4608      	mov	r0, r1
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	f7fd faf3 	bl	800092a <_close>
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	d102      	bne.n	800334e <_close_r+0x1a>
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	b103      	cbz	r3, 800334e <_close_r+0x1a>
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	20000250 	.word	0x20000250

08003354 <_fstat_r>:
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4d07      	ldr	r5, [pc, #28]	; (8003374 <_fstat_r+0x20>)
 8003358:	2300      	movs	r3, #0
 800335a:	4604      	mov	r4, r0
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	602b      	str	r3, [r5, #0]
 8003362:	f7fd faee 	bl	8000942 <_fstat>
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	d102      	bne.n	8003370 <_fstat_r+0x1c>
 800336a:	682b      	ldr	r3, [r5, #0]
 800336c:	b103      	cbz	r3, 8003370 <_fstat_r+0x1c>
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	bd38      	pop	{r3, r4, r5, pc}
 8003372:	bf00      	nop
 8003374:	20000250 	.word	0x20000250

08003378 <_isatty_r>:
 8003378:	b538      	push	{r3, r4, r5, lr}
 800337a:	4d06      	ldr	r5, [pc, #24]	; (8003394 <_isatty_r+0x1c>)
 800337c:	2300      	movs	r3, #0
 800337e:	4604      	mov	r4, r0
 8003380:	4608      	mov	r0, r1
 8003382:	602b      	str	r3, [r5, #0]
 8003384:	f7fd faed 	bl	8000962 <_isatty>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d102      	bne.n	8003392 <_isatty_r+0x1a>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	b103      	cbz	r3, 8003392 <_isatty_r+0x1a>
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	20000250 	.word	0x20000250

08003398 <_lseek_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4d07      	ldr	r5, [pc, #28]	; (80033b8 <_lseek_r+0x20>)
 800339c:	4604      	mov	r4, r0
 800339e:	4608      	mov	r0, r1
 80033a0:	4611      	mov	r1, r2
 80033a2:	2200      	movs	r2, #0
 80033a4:	602a      	str	r2, [r5, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f7fd fae6 	bl	8000978 <_lseek>
 80033ac:	1c43      	adds	r3, r0, #1
 80033ae:	d102      	bne.n	80033b6 <_lseek_r+0x1e>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	b103      	cbz	r3, 80033b6 <_lseek_r+0x1e>
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	bd38      	pop	{r3, r4, r5, pc}
 80033b8:	20000250 	.word	0x20000250

080033bc <_read_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	4d07      	ldr	r5, [pc, #28]	; (80033dc <_read_r+0x20>)
 80033c0:	4604      	mov	r4, r0
 80033c2:	4608      	mov	r0, r1
 80033c4:	4611      	mov	r1, r2
 80033c6:	2200      	movs	r2, #0
 80033c8:	602a      	str	r2, [r5, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f7fd fa74 	bl	80008b8 <_read>
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	d102      	bne.n	80033da <_read_r+0x1e>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	b103      	cbz	r3, 80033da <_read_r+0x1e>
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	bd38      	pop	{r3, r4, r5, pc}
 80033dc:	20000250 	.word	0x20000250

080033e0 <_init>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr

080033ec <_fini>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	bf00      	nop
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr
